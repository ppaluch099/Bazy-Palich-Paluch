--------------------------------------------------------
--  File created - œroda-maja-26-2021   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence BAGAZE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SZYMON"."BAGAZE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 201 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence BILETY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SZYMON"."BILETY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence HIBERNATE_SEQUENCE
--------------------------------------------------------

   CREATE SEQUENCE  "SZYMON"."HIBERNATE_SEQUENCE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence LOTNISKA_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SZYMON"."LOTNISKA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 102 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence LOTY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SZYMON"."LOTY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PASAZEROWIE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SZYMON"."PASAZEROWIE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 181 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PRACOWNICY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SZYMON"."PRACOWNICY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 82 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SAMOLOTY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SZYMON"."SAMOLOTY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 62 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TYPY_BAGAZY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SZYMON"."TYPY_BAGAZY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TYPY_SAMOLOTOW_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SZYMON"."TYPY_SAMOLOTOW_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence UZYTKOWNICY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SZYMON"."UZYTKOWNICY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 228 CACHE 10 ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table BAGAZE
--------------------------------------------------------

  CREATE TABLE "SZYMON"."BAGAZE" 
   (	"ID_BAGAZ" NUMBER, 
	"ID_TYP_BAGAZU" NUMBER, 
	"WAGA_BAGAZU_PODRECZNEGO" NUMBER(10,2), 
	"WAGA_BAGAZU_REJESTROWANEGO" NUMBER(10,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BILETY
--------------------------------------------------------

  CREATE TABLE "SZYMON"."BILETY" 
   (	"ID_BILET" NUMBER(*,0), 
	"ID_PASAZER" NUMBER(*,0), 
	"ID_LOT" NUMBER(*,0), 
	"ID_BAGAZ" NUMBER(*,0), 
	"MIEJSCE" NUMBER, 
	"CENA" NUMBER(10,2), 
	"CZY_OPLACONY" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LOTNISKA
--------------------------------------------------------

  CREATE TABLE "SZYMON"."LOTNISKA" 
   (	"ID_LOTNISKO" NUMBER(*,0), 
	"KOD_LOTNISKO" VARCHAR2(40 BYTE), 
	"MIASTO" VARCHAR2(40 BYTE), 
	"KRAJ" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LOTY
--------------------------------------------------------

  CREATE TABLE "SZYMON"."LOTY" 
   (	"ID_LOT" NUMBER(*,0), 
	"ID_MIEJSCA_ODLOTU" NUMBER(*,0), 
	"ID_MIEJSCA_PRZYLOTU" NUMBER(*,0), 
	"ID_SAMOLOT" NUMBER(*,0), 
	"DATA_ODLOTU" DATE, 
	"DATA_PRZYLOTU" DATE, 
	"PRZEWIDYWANY_CZAS_LOTU" NUMBER, 
	"WAGA_BAGAZY" NUMBER(10,2), 
	"PRZEWIDYWANY_ZYSK" NUMBER(10,2), 
	"CENA_BILETU" NUMBER(10,2), 
	"WOLNE_MIEJSCA" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LOTY_PRACOWNICY
--------------------------------------------------------

  CREATE TABLE "SZYMON"."LOTY_PRACOWNICY" 
   (	"ID_LOT" NUMBER, 
	"ID_PRACOWNICY" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PASAZEROWIE
--------------------------------------------------------

  CREATE TABLE "SZYMON"."PASAZEROWIE" 
   (	"ID_PASAZER" NUMBER, 
	"ID_UZYTKOWNIK" NUMBER, 
	"IMIE" VARCHAR2(40 BYTE), 
	"NAZWISKO" VARCHAR2(40 BYTE), 
	"NR_TELEFONU" VARCHAR2(40 BYTE), 
	"E_MAIL" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRACOWNICY
--------------------------------------------------------

  CREATE TABLE "SZYMON"."PRACOWNICY" 
   (	"ID_PRACOWNIK" NUMBER(*,0), 
	"IMIE" VARCHAR2(40 BYTE), 
	"NAZWISKO" VARCHAR2(40 BYTE), 
	"STANOWISKO" VARCHAR2(40 BYTE), 
	"PENSJA" NUMBER(10,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SAMOLOTY
--------------------------------------------------------

  CREATE TABLE "SZYMON"."SAMOLOTY" 
   (	"ID_SAMOLOT" NUMBER, 
	"ID_TYP" NUMBER, 
	"MARKA" VARCHAR2(40 BYTE), 
	"S_MODEL" VARCHAR2(40 BYTE), 
	"LICZBA_MIEJSC" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TYPY_BAGAZY
--------------------------------------------------------

  CREATE TABLE "SZYMON"."TYPY_BAGAZY" 
   (	"ID_TYP_BAGAZ" NUMBER, 
	"WAGA" NUMBER(10,2), 
	"OPLATA" NUMBER(10,2), 
	"TYP" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TYPY_SAMOLOTOW
--------------------------------------------------------

  CREATE TABLE "SZYMON"."TYPY_SAMOLOTOW" 
   (	"ID_TYP" NUMBER, 
	"TYP" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table UZYTKOWNICY
--------------------------------------------------------

  CREATE TABLE "SZYMON"."UZYTKOWNICY" 
   (	"ID_UZYTKOWNIK" NUMBER, 
	"USERNAME" VARCHAR2(40 BYTE), 
	"PASS" VARCHAR2(255 BYTE), 
	"TYP_KONTA" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
REM INSERTING into SZYMON.BAGAZE
SET DEFINE OFF;
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('167','2','12','13');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('176','1','1','1');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('179','3','12','35');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('180','1','1','1');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('181','3','12','35');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('143','2','12','13');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('144','2','12','13');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('142','2','12','13');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('165','2','12','13');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('178','1','1','1');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('141','2','12','13');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('162','2','12','13');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('166','1','1','1');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('168','1','3','4');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('173','1','2','3');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('145','2','12','13');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('161','3','12','30');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('163','2','12','13');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('164','2','12','13');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('174','1','0','0');
Insert into SZYMON.BAGAZE (ID_BAGAZ,ID_TYP_BAGAZU,WAGA_BAGAZU_PODRECZNEGO,WAGA_BAGAZU_REJESTROWANEGO) values ('175','1','0','0');
REM INSERTING into SZYMON.BILETY
SET DEFINE OFF;
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('83','142','65','143','79','852,88','1');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('105','23','81','167','59','4763,8','1');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('84','23','61','144','59','283,9','1');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('110','163','81','176','54','4763,8','1');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('112','164','81','179','52','4988,8','1');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('113','165','82','180','59','643,6','1');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('114','166','81','181','51','4988,8','0');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('81','141','61','141','60','308,9','1');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('82','141','65','142','80','1077,88','1');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('104','23','81','165','60','4763,8','1');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('111','163','81','178','53','4763,8','1');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('101','23','82','162','60','868,6','1');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('106','23','81','168','58','4763,8','1');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('85','23','65','145','78','852,88','1');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('107','23','81','173','57','4763,8','1');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('109','23','81','175','55','4708,8','0');
Insert into SZYMON.BILETY (ID_BILET,ID_PASAZER,ID_LOT,ID_BAGAZ,MIEJSCE,CENA,CZY_OPLACONY) values ('108','23','81','174','56','4708,8','1');
REM INSERTING into SZYMON.LOTNISKA
SET DEFINE OFF;
Insert into SZYMON.LOTNISKA (ID_LOTNISKO,KOD_LOTNISKO,MIASTO,KRAJ) values ('83','TYO','JAPONIA','TOKYO');
Insert into SZYMON.LOTNISKA (ID_LOTNISKO,KOD_LOTNISKO,MIASTO,KRAJ) values ('31','LUB','LUBLIN','POLSKA');
Insert into SZYMON.LOTNISKA (ID_LOTNISKO,KOD_LOTNISKO,MIASTO,KRAJ) values ('32','MED','MEDYNIA','POLSKA');
Insert into SZYMON.LOTNISKA (ID_LOTNISKO,KOD_LOTNISKO,MIASTO,KRAJ) values ('63','BKK','BANGKOK','TAJLANDIA');
Insert into SZYMON.LOTNISKA (ID_LOTNISKO,KOD_LOTNISKO,MIASTO,KRAJ) values ('42','KYO','KYOTO','JAPONIA');
Insert into SZYMON.LOTNISKA (ID_LOTNISKO,KOD_LOTNISKO,MIASTO,KRAJ) values ('62','KOR','KOREA','POLSKA');
Insert into SZYMON.LOTNISKA (ID_LOTNISKO,KOD_LOTNISKO,MIASTO,KRAJ) values ('65','NYO','NOWY YORK','USA');
Insert into SZYMON.LOTNISKA (ID_LOTNISKO,KOD_LOTNISKO,MIASTO,KRAJ) values ('41','TEST','TESTOWE','TESTOV');
Insert into SZYMON.LOTNISKA (ID_LOTNISKO,KOD_LOTNISKO,MIASTO,KRAJ) values ('82','RZE','RZESZOW','POLSKA');
Insert into SZYMON.LOTNISKA (ID_LOTNISKO,KOD_LOTNISKO,MIASTO,KRAJ) values ('2','TEL','TELATYN','UKRAINA');
Insert into SZYMON.LOTNISKA (ID_LOTNISKO,KOD_LOTNISKO,MIASTO,KRAJ) values ('64','CAI','KAIR','EGIPT');
REM INSERTING into SZYMON.LOTY
SET DEFINE OFF;
Insert into SZYMON.LOTY (ID_LOT,ID_MIEJSCA_ODLOTU,ID_MIEJSCA_PRZYLOTU,ID_SAMOLOT,DATA_ODLOTU,DATA_PRZYLOTU,PRZEWIDYWANY_CZAS_LOTU,WAGA_BAGAZY,PRZEWIDYWANY_ZYSK,CENA_BILETU,WOLNE_MIEJSCA) values ('81','31','62','44',to_date('21/05/27','RR/MM/DD'),to_date('21/05/28','RR/MM/DD'),'1440','113','38280,4','4708,8','50');
Insert into SZYMON.LOTY (ID_LOT,ID_MIEJSCA_ODLOTU,ID_MIEJSCA_PRZYLOTU,ID_SAMOLOT,DATA_ODLOTU,DATA_PRZYLOTU,PRZEWIDYWANY_CZAS_LOTU,WAGA_BAGAZY,PRZEWIDYWANY_ZYSK,CENA_BILETU,WOLNE_MIEJSCA) values ('62','63','64','44',to_date('21/06/04','RR/MM/DD'),to_date('21/06/04','RR/MM/DD'),'180','0','0','588,6','60');
Insert into SZYMON.LOTY (ID_LOT,ID_MIEJSCA_ODLOTU,ID_MIEJSCA_PRZYLOTU,ID_SAMOLOT,DATA_ODLOTU,DATA_PRZYLOTU,PRZEWIDYWANY_CZAS_LOTU,WAGA_BAGAZY,PRZEWIDYWANY_ZYSK,CENA_BILETU,WOLNE_MIEJSCA) values ('82','64','32','44',to_date('21/05/27','RR/MM/DD'),to_date('21/05/27','RR/MM/DD'),'180','27','1512,2','588,6','58');
Insert into SZYMON.LOTY (ID_LOT,ID_MIEJSCA_ODLOTU,ID_MIEJSCA_PRZYLOTU,ID_SAMOLOT,DATA_ODLOTU,DATA_PRZYLOTU,PRZEWIDYWANY_CZAS_LOTU,WAGA_BAGAZY,PRZEWIDYWANY_ZYSK,CENA_BILETU,WOLNE_MIEJSCA) values ('63','2','32','49',to_date('21/06/05','RR/MM/DD'),to_date('21/06/05','RR/MM/DD'),'3','0','0','9,81','80');
Insert into SZYMON.LOTY (ID_LOT,ID_MIEJSCA_ODLOTU,ID_MIEJSCA_PRZYLOTU,ID_SAMOLOT,DATA_ODLOTU,DATA_PRZYLOTU,PRZEWIDYWANY_CZAS_LOTU,WAGA_BAGAZY,PRZEWIDYWANY_ZYSK,CENA_BILETU,WOLNE_MIEJSCA) values ('64','64','63','44',to_date('21/06/04','RR/MM/DD'),to_date('21/06/05','RR/MM/DD'),'904','0','0','2956,08','60');
Insert into SZYMON.LOTY (ID_LOT,ID_MIEJSCA_ODLOTU,ID_MIEJSCA_PRZYLOTU,ID_SAMOLOT,DATA_ODLOTU,DATA_PRZYLOTU,PRZEWIDYWANY_CZAS_LOTU,WAGA_BAGAZY,PRZEWIDYWANY_ZYSK,CENA_BILETU,WOLNE_MIEJSCA) values ('65','62','41','43',to_date('21/05/23','RR/MM/DD'),to_date('21/05/23','RR/MM/DD'),'244','75','2783,64','797,88','77');
Insert into SZYMON.LOTY (ID_LOT,ID_MIEJSCA_ODLOTU,ID_MIEJSCA_PRZYLOTU,ID_SAMOLOT,DATA_ODLOTU,DATA_PRZYLOTU,PRZEWIDYWANY_CZAS_LOTU,WAGA_BAGAZY,PRZEWIDYWANY_ZYSK,CENA_BILETU,WOLNE_MIEJSCA) values ('70','2','62','42',to_date('21/05/10','RR/MM/DD'),to_date('21/05/10','RR/MM/DD'),'60','12','12414','147,15','220');
Insert into SZYMON.LOTY (ID_LOT,ID_MIEJSCA_ODLOTU,ID_MIEJSCA_PRZYLOTU,ID_SAMOLOT,DATA_ODLOTU,DATA_PRZYLOTU,PRZEWIDYWANY_CZAS_LOTU,WAGA_BAGAZY,PRZEWIDYWANY_ZYSK,CENA_BILETU,WOLNE_MIEJSCA) values ('61','2','62','42',to_date('21/05/23','RR/MM/DD'),to_date('21/05/23','RR/MM/DD'),'70','50','592,8','228,9','58');
REM INSERTING into SZYMON.LOTY_PRACOWNICY
SET DEFINE OFF;
REM INSERTING into SZYMON.PASAZEROWIE
SET DEFINE OFF;
Insert into SZYMON.PASAZEROWIE (ID_PASAZER,ID_UZYTKOWNIK,IMIE,NAZWISKO,NR_TELEFONU,E_MAIL) values ('163','220','user','Userowy','123456789','user@user.pl');
Insert into SZYMON.PASAZEROWIE (ID_PASAZER,ID_UZYTKOWNIK,IMIE,NAZWISKO,NR_TELEFONU,E_MAIL) values ('164','221','Milan','Zalewski','153246758','Milan@gmail.com');
Insert into SZYMON.PASAZEROWIE (ID_PASAZER,ID_UZYTKOWNIK,IMIE,NAZWISKO,NR_TELEFONU,E_MAIL) values ('166','223','Heronim','Jankowski','2131235112','Jankowski@gmail.com');
Insert into SZYMON.PASAZEROWIE (ID_PASAZER,ID_UZYTKOWNIK,IMIE,NAZWISKO,NR_TELEFONU,E_MAIL) values ('165','222','boi','Nextdoor','123334555','ema@asa.pl');
Insert into SZYMON.PASAZEROWIE (ID_PASAZER,ID_UZYTKOWNIK,IMIE,NAZWISKO,NR_TELEFONU,E_MAIL) values ('23','52','Alicja','Jackowski','666666666','jacek@jacek.jacek');
Insert into SZYMON.PASAZEROWIE (ID_PASAZER,ID_UZYTKOWNIK,IMIE,NAZWISKO,NR_TELEFONU,E_MAIL) values ('141','208','patryk','Plizga','123098475','patryk@patryk.patryk');
Insert into SZYMON.PASAZEROWIE (ID_PASAZER,ID_UZYTKOWNIK,IMIE,NAZWISKO,NR_TELEFONU,E_MAIL) values ('143','210','test',' ',' ',' ');
Insert into SZYMON.PASAZEROWIE (ID_PASAZER,ID_UZYTKOWNIK,IMIE,NAZWISKO,NR_TELEFONU,E_MAIL) values ('142','209','tomek','Nowak','124546343','tomek@wp.com');
REM INSERTING into SZYMON.PRACOWNICY
SET DEFINE OFF;
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('68','Filip','Tomaszewski','Sprzedawca','1500');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('70','SolidPatryk','Tezniemogepodac','Tajny Agent','400');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('69','Maria','Chmielewska','Sprzataczka','900');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('71','Weronika','Pietrzak','Stewardessa','750');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('72','VenomPatryk','Rowniezniemogepodac','Zolnierz','3599');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('73','Patryk','BigBoss','Wielki Szef','4004');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('74','Jan','B','Wykladowca','4670');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('75','Krzysztof','Ojoj','Bezrobotny','1300');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('65','Kryspin','Jakubowski','Ochroniarz','2100');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('63','Szymon','Niepalich','Kierowca','6005');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('64','Przemyslaw','Paluch','Kierownik','3500');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('66','Joseph','Conrad','Pisarz','12414');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('67','LiquidPatryk','Niemogepodac','Ochroniarz','4444');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('2','Patryk','Plizga','Pomocnik Asystenta','1200');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('42','Randy','Random','Mechanik','12444');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('43','Joanna','Jakastam','Sekretarka','1233');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('22','Krzysztof','Przewoznik','Sprzatacz','4000');
Insert into SZYMON.PRACOWNICY (ID_PRACOWNIK,IMIE,NAZWISKO,STANOWISKO,PENSJA) values ('62','Szymon','Palich','Menager','10000000');
REM INSERTING into SZYMON.SAMOLOTY
SET DEFINE OFF;
Insert into SZYMON.SAMOLOTY (ID_SAMOLOT,ID_TYP,MARKA,S_MODEL,LICZBA_MIEJSC) values ('44','2','Jakastam','20000','60');
Insert into SZYMON.SAMOLOTY (ID_SAMOLOT,ID_TYP,MARKA,S_MODEL,LICZBA_MIEJSC) values ('45','3','Jakastam','10000','40');
Insert into SZYMON.SAMOLOTY (ID_SAMOLOT,ID_TYP,MARKA,S_MODEL,LICZBA_MIEJSC) values ('42','4','WruumAir','0x000c2337','220');
Insert into SZYMON.SAMOLOTY (ID_SAMOLOT,ID_TYP,MARKA,S_MODEL,LICZBA_MIEJSC) values ('46','4','CityAir','1','4');
Insert into SZYMON.SAMOLOTY (ID_SAMOLOT,ID_TYP,MARKA,S_MODEL,LICZBA_MIEJSC) values ('49','4','Tupolew','Ty-204','80');
Insert into SZYMON.SAMOLOTY (ID_SAMOLOT,ID_TYP,MARKA,S_MODEL,LICZBA_MIEJSC) values ('43','1','Bening','A123','80');
REM INSERTING into SZYMON.TYPY_BAGAZY
SET DEFINE OFF;
Insert into SZYMON.TYPY_BAGAZY (ID_TYP_BAGAZ,WAGA,OPLATA,TYP) values ('1','10','55','Mini');
Insert into SZYMON.TYPY_BAGAZY (ID_TYP_BAGAZ,WAGA,OPLATA,TYP) values ('2','20','80','Midi');
Insert into SZYMON.TYPY_BAGAZY (ID_TYP_BAGAZ,WAGA,OPLATA,TYP) values ('3','35','280','Maxi');
REM INSERTING into SZYMON.TYPY_SAMOLOTOW
SET DEFINE OFF;
Insert into SZYMON.TYPY_SAMOLOTOW (ID_TYP,TYP) values ('4','Najwolniejszy');
Insert into SZYMON.TYPY_SAMOLOTOW (ID_TYP,TYP) values ('1','Wolny');
Insert into SZYMON.TYPY_SAMOLOTOW (ID_TYP,TYP) values ('2','Powolny');
Insert into SZYMON.TYPY_SAMOLOTOW (ID_TYP,TYP) values ('3','Wolniejszy');
REM INSERTING into SZYMON.UZYTKOWNICY
SET DEFINE OFF;
Insert into SZYMON.UZYTKOWNICY (ID_UZYTKOWNIK,USERNAME,PASS,TYP_KONTA) values ('220','user','$2y$10$.0smmKifWRpANnRhjR9tMeQVU7OMaWFQGoeTsHqARrC41uoS4od.y','0');
Insert into SZYMON.UZYTKOWNICY (ID_UZYTKOWNIK,USERNAME,PASS,TYP_KONTA) values ('221','Milan','$2y$10$rOfkLA20hYQMAS98TC9Nv.Oy4AFaVSE2PsSubPwhkzWr9iO/eup26','0');
Insert into SZYMON.UZYTKOWNICY (ID_UZYTKOWNIK,USERNAME,PASS,TYP_KONTA) values ('223','Heronim','$2y$10$vW65aLWOdlMRlFWQhkgPROQx6vd8tdenBMiyQJ2c6Y0HzHT/tKKTC','0');
Insert into SZYMON.UZYTKOWNICY (ID_UZYTKOWNIK,USERNAME,PASS,TYP_KONTA) values ('222','boi','$2y$10$6V2i1HYdVI.XQnrGjFbIDu0Ja82FEs4Hx4O.p74tmVICoGzAhxp7m','0');
Insert into SZYMON.UZYTKOWNICY (ID_UZYTKOWNIK,USERNAME,PASS,TYP_KONTA) values ('104','root','$2y$10$UFeRm1Xrqjt/SL8H9wcrmesdaDOniDC63Cey8GZZ6S2jLVpKXF0Ne','1');
Insert into SZYMON.UZYTKOWNICY (ID_UZYTKOWNIK,USERNAME,PASS,TYP_KONTA) values ('208','patryk','$2y$10$x2oSI1CTA7Us.TmaqNAOx.aQv4oxEYOBaAThy.9n1pdRD7ZiS6Fiu','0');
Insert into SZYMON.UZYTKOWNICY (ID_UZYTKOWNIK,USERNAME,PASS,TYP_KONTA) values ('52','jacek','$2y$10$NLj67eofLAY9.1blAXKf6u9jLHFErn9fy2dLaacLJtLo2f80vzMKi','0');
Insert into SZYMON.UZYTKOWNICY (ID_UZYTKOWNIK,USERNAME,PASS,TYP_KONTA) values ('209','tomek','$2y$10$jPqgDm0bG3WGtd9xAj2vR.QvVq4mVKdtCvazky8Sg.x98PI6pCf7e','0');
Insert into SZYMON.UZYTKOWNICY (ID_UZYTKOWNIK,USERNAME,PASS,TYP_KONTA) values ('210','test','$2y$10$Yc/P9i.2HkaxZvq.cnG60.QO2b.DCTjmDjhqR3qo4gKuAaf8xryAS','0');
--------------------------------------------------------
--  DDL for Index BAGAZE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."BAGAZE_PK" ON "SZYMON"."BAGAZE" ("ID_BAGAZ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BILETY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."BILETY_PK" ON "SZYMON"."BILETY" ("ID_BILET") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LOTNISKO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."LOTNISKO_PK" ON "SZYMON"."LOTNISKA" ("ID_LOTNISKO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LOTY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."LOTY_PK" ON "SZYMON"."LOTY" ("ID_LOT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PASAZEROWIE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."PASAZEROWIE_PK" ON "SZYMON"."PASAZEROWIE" ("ID_PASAZER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PASAZEROWIE_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."PASAZEROWIE_UK1" ON "SZYMON"."PASAZEROWIE" ("ID_UZYTKOWNIK") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PRACOWNICY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."PRACOWNICY_PK" ON "SZYMON"."PRACOWNICY" ("ID_PRACOWNIK") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SAMOLOTY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."SAMOLOTY_PK" ON "SZYMON"."SAMOLOTY" ("ID_SAMOLOT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TYPY_BAGAZY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."TYPY_BAGAZY_PK" ON "SZYMON"."TYPY_BAGAZY" ("ID_TYP_BAGAZ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TYPY_SAMOLOTOW_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."TYPY_SAMOLOTOW_PK" ON "SZYMON"."TYPY_SAMOLOTOW" ("ID_TYP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UZYTKOWNICY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."UZYTKOWNICY_PK" ON "SZYMON"."UZYTKOWNICY" ("ID_UZYTKOWNIK") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BAGAZE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."BAGAZE_PK" ON "SZYMON"."BAGAZE" ("ID_BAGAZ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BILETY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."BILETY_PK" ON "SZYMON"."BILETY" ("ID_BILET") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LOTNISKO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."LOTNISKO_PK" ON "SZYMON"."LOTNISKA" ("ID_LOTNISKO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LOTY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."LOTY_PK" ON "SZYMON"."LOTY" ("ID_LOT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PASAZEROWIE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."PASAZEROWIE_PK" ON "SZYMON"."PASAZEROWIE" ("ID_PASAZER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PASAZEROWIE_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."PASAZEROWIE_UK1" ON "SZYMON"."PASAZEROWIE" ("ID_UZYTKOWNIK") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PRACOWNICY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."PRACOWNICY_PK" ON "SZYMON"."PRACOWNICY" ("ID_PRACOWNIK") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SAMOLOTY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."SAMOLOTY_PK" ON "SZYMON"."SAMOLOTY" ("ID_SAMOLOT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TYPY_BAGAZY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."TYPY_BAGAZY_PK" ON "SZYMON"."TYPY_BAGAZY" ("ID_TYP_BAGAZ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TYPY_SAMOLOTOW_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."TYPY_SAMOLOTOW_PK" ON "SZYMON"."TYPY_SAMOLOTOW" ("ID_TYP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UZYTKOWNICY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SZYMON"."UZYTKOWNICY_PK" ON "SZYMON"."UZYTKOWNICY" ("ID_UZYTKOWNIK") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger BAGAZE_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."BAGAZE_TRG" 
BEFORE INSERT ON BAGAZE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_BAGAZ IS NULL THEN
      SELECT BAGAZE_SEQ.NEXTVAL INTO :NEW.ID_BAGAZ FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."BAGAZE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BILETY_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."BILETY_TRG" 
BEFORE INSERT ON BILETY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_BILET IS NULL THEN
      SELECT BILETY_SEQ.NEXTVAL INTO :NEW.ID_BILET FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."BILETY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CREATE_NEW_USER_PROFILE_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."CREATE_NEW_USER_PROFILE_TRG" 
  FOR INSERT 
  ON uzytkownicy
    COMPOUND TRIGGER 
    username uzytkownicy.username%TYPE;
    acc_type uzytkownicy.typ_konta%TYPE;
    AFTER EACH ROW IS
        BEGIN
            username := :new.username;
            acc_type := :new.typ_konta;
        END AFTER EACH ROW;
    AFTER STATEMENT IS
        BEGIN
            IF acc_type = 0 THEN
                user_profile.user_edit(username, username, '', '', '');
            END IF;
    END AFTER STATEMENT;
END CREATE_NEW_USER_PROFILE_TRG;
/
ALTER TRIGGER "SZYMON"."CREATE_NEW_USER_PROFILE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CZAS_CENA_LOTU_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."CZAS_CENA_LOTU_TRG" 
  BEFORE
    INSERT OR
    UPDATE OF data_przylotu, data_odlotu
  ON loty
FOR EACH ROW
DECLARE
   diff NUMBER(10, 0);
   cena NUMBER(10, 2);
BEGIN
    SELECT 24 * 60 * (:NEW.DATA_PRZYLOTU 
             - :NEW.DATA_ODLOTU) INTO diff FROM dual;
    cena := diff * 3.27 * 0.75;
    CASE
        WHEN INSERTING THEN
            :NEW.przewidywany_czas_lotu := diff;
            :NEW.cena_biletu := cena;
        WHEN UPDATING THEN
            :NEW.przewidywany_czas_lotu := diff;
            :NEW.cena_biletu := cena;
  END CASE;
END;
/
ALTER TRIGGER "SZYMON"."CZAS_CENA_LOTU_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LOTNISKA_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."LOTNISKA_TRG" 
BEFORE INSERT ON LOTNISKA 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_LOTNISKO IS NULL THEN
      SELECT LOTNISKA_SEQ.NEXTVAL INTO :NEW.ID_LOTNISKO FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."LOTNISKA_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LOTNISKA_UPPERCASE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."LOTNISKA_UPPERCASE" 
  BEFORE
    INSERT OR
    UPDATE OF miasto, kraj, kod_lotnisko
  ON lotniska
FOR EACH ROW

BEGIN
    :NEW.miasto := UPPER(:NEW.miasto);
    :NEW.kraj := UPPER(:NEW.kraj);
    :NEW.kod_lotnisko := UPPER(:NEW.kod_lotnisko);
END;
/
ALTER TRIGGER "SZYMON"."LOTNISKA_UPPERCASE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LOTY_BAGAZE_ZYSK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."LOTY_BAGAZE_ZYSK" 
  AFTER INSERT OR DELETE OR UPDATE OF czy_oplacony
  ON BILETY
  FOR EACH ROW
DECLARE
    waga_old            bagaze.waga_bagazu_podrecznego%TYPE;
    waga_pod            bagaze.waga_bagazu_podrecznego%TYPE;
    waga_rej            bagaze.waga_bagazu_podrecznego%TYPE;
    new_bagaz           bagaze.waga_bagazu_podrecznego%TYPE;
    new_cena            bilety.cena%TYPE;
    old_cena            bilety.cena%TYPE;

    old_w_miejsca       loty.wolne_miejsca%TYPE;

BEGIN   
    CASE
        WHEN UPDATING('CZY_OPLACONY') THEN
            SELECT waga_bagazy INTO waga_old FROM LOTY WHERE loty.id_lot=:OLD.ID_LOT;
            SELECT waga_bagazu_podrecznego INTO waga_pod FROM BAGAZE WHERE bagaze.id_bagaz=:OLD.id_bagaz;
            SELECT waga_bagazu_rejestrowanego INTO waga_rej FROM BAGAZE WHERE bagaze.id_bagaz=:OLD.id_bagaz;
            new_bagaz := waga_old+waga_pod+waga_rej;

            SELECT PRZEWIDYWANY_ZYSK INTO old_cena FROM LOTY WHERE loty.id_lot=:OLD.ID_LOT;
            new_cena := old_cena+:OLD.cena;

            UPDATE loty set waga_bagazy=new_bagaz where loty.id_lot=:OLD.id_lot;
            UPDATE loty set przewidywany_zysk=new_cena where loty.id_lot=:OLD.id_lot;

        WHEN INSERTING THEN
            SELECT wolne_miejsca INTO old_w_miejsca FROM LOTY WHERE loty.id_lot=:NEW.ID_LOT;
            old_w_miejsca:=old_w_miejsca-1;
            UPDATE LOTY SET WOLNE_MIEJSCA=old_w_miejsca WHERE loty.id_lot=:NEW.ID_LOT;

        WHEN DELETING THEN
            SELECT wolne_miejsca INTO old_w_miejsca FROM LOTY WHERE loty.id_lot=:OLD.ID_LOT;
            old_w_miejsca:=old_w_miejsca+1;
            UPDATE LOTY SET WOLNE_MIEJSCA=old_w_miejsca WHERE loty.id_lot=:OLD.ID_LOT;
    END CASE;
END LOTY_BAGAZE_ZYSK;
/
ALTER TRIGGER "SZYMON"."LOTY_BAGAZE_ZYSK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LOTY_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."LOTY_TRG" 
BEFORE INSERT ON LOTY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."LOTY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PASAZEROWIE_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."PASAZEROWIE_TRG" 
BEFORE INSERT ON PASAZEROWIE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_PASAZER IS NULL THEN
      SELECT PASAZEROWIE_SEQ.NEXTVAL INTO :NEW.ID_PASAZER FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."PASAZEROWIE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SAMOLOTY_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."SAMOLOTY_TRG" 
BEFORE INSERT ON SAMOLOTY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_SAMOLOT IS NULL THEN
      SELECT SAMOLOTY_SEQ.NEXTVAL INTO :NEW.ID_SAMOLOT FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."SAMOLOTY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SET_BAGAZ_TYP_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."SET_BAGAZ_TYP_TRG" 
  BEFORE
    INSERT OR
    UPDATE OF waga_bagazu_rejestrowanego
  ON bagaze
FOR EACH ROW
DECLARE
    v_typ NUMBER(10);
BEGIN
    v_typ:='1';

    IF :NEW.waga_bagazu_rejestrowanego > 10 AND :NEW.waga_bagazu_rejestrowanego <= 20 THEN
        v_typ:='2';
    ELSIF :NEW.waga_bagazu_rejestrowanego > 20 THEN
        v_typ:='3';
    END IF;

    CASE
        WHEN INSERTING THEN
            :NEW.ID_TYP_BAGAZU := v_typ;
        WHEN UPDATING('waga_bagazu_rejestrowanego') THEN
            :NEW.ID_TYP_BAGAZU := v_typ;
  END CASE;
END;
/
ALTER TRIGGER "SZYMON"."SET_BAGAZ_TYP_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TYPY_BAGAZY_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."TYPY_BAGAZY_TRG" 
BEFORE INSERT ON TYPY_BAGAZY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."TYPY_BAGAZY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TYPY_SAMOLOTOW_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."TYPY_SAMOLOTOW_TRG" 
BEFORE INSERT ON TYPY_SAMOLOTOW 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_TYP IS NULL THEN
      SELECT TYPY_SAMOLOTOW_SEQ.NEXTVAL INTO :NEW.ID_TYP FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."TYPY_SAMOLOTOW_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger WOLNE_MIEJSCA_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."WOLNE_MIEJSCA_TRG" 
  BEFORE INSERT
  ON LOTY
  FOR EACH ROW
DECLARE
    w_miejsca       samoloty.liczba_miejsc%TYPE;
BEGIN   
    CASE
        WHEN INSERTING THEN
            SELECT liczba_miejsc INTO w_miejsca FROM samoloty WHERE samoloty.id_samolot=:NEW.ID_SAMOLOT;
            :NEW.wolne_miejsca := w_miejsca;
    END CASE;
END LOTY_BAGAZE_ZYSK;
/
ALTER TRIGGER "SZYMON"."WOLNE_MIEJSCA_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BAGAZE_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."BAGAZE_TRG" 
BEFORE INSERT ON BAGAZE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_BAGAZ IS NULL THEN
      SELECT BAGAZE_SEQ.NEXTVAL INTO :NEW.ID_BAGAZ FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."BAGAZE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SET_BAGAZ_TYP_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."SET_BAGAZ_TYP_TRG" 
  BEFORE
    INSERT OR
    UPDATE OF waga_bagazu_rejestrowanego
  ON bagaze
FOR EACH ROW
DECLARE
    v_typ NUMBER(10);
BEGIN
    v_typ:='1';

    IF :NEW.waga_bagazu_rejestrowanego > 10 AND :NEW.waga_bagazu_rejestrowanego <= 20 THEN
        v_typ:='2';
    ELSIF :NEW.waga_bagazu_rejestrowanego > 20 THEN
        v_typ:='3';
    END IF;

    CASE
        WHEN INSERTING THEN
            :NEW.ID_TYP_BAGAZU := v_typ;
        WHEN UPDATING('waga_bagazu_rejestrowanego') THEN
            :NEW.ID_TYP_BAGAZU := v_typ;
  END CASE;
END;
/
ALTER TRIGGER "SZYMON"."SET_BAGAZ_TYP_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BILETY_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."BILETY_TRG" 
BEFORE INSERT ON BILETY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_BILET IS NULL THEN
      SELECT BILETY_SEQ.NEXTVAL INTO :NEW.ID_BILET FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."BILETY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LOTY_BAGAZE_ZYSK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."LOTY_BAGAZE_ZYSK" 
  AFTER INSERT OR DELETE OR UPDATE OF czy_oplacony
  ON BILETY
  FOR EACH ROW
DECLARE
    waga_old            bagaze.waga_bagazu_podrecznego%TYPE;
    waga_pod            bagaze.waga_bagazu_podrecznego%TYPE;
    waga_rej            bagaze.waga_bagazu_podrecznego%TYPE;
    new_bagaz           bagaze.waga_bagazu_podrecznego%TYPE;
    new_cena            bilety.cena%TYPE;
    old_cena            bilety.cena%TYPE;

    old_w_miejsca       loty.wolne_miejsca%TYPE;

BEGIN   
    CASE
        WHEN UPDATING('CZY_OPLACONY') THEN
            SELECT waga_bagazy INTO waga_old FROM LOTY WHERE loty.id_lot=:OLD.ID_LOT;
            SELECT waga_bagazu_podrecznego INTO waga_pod FROM BAGAZE WHERE bagaze.id_bagaz=:OLD.id_bagaz;
            SELECT waga_bagazu_rejestrowanego INTO waga_rej FROM BAGAZE WHERE bagaze.id_bagaz=:OLD.id_bagaz;
            new_bagaz := waga_old+waga_pod+waga_rej;

            SELECT PRZEWIDYWANY_ZYSK INTO old_cena FROM LOTY WHERE loty.id_lot=:OLD.ID_LOT;
            new_cena := old_cena+:OLD.cena;

            UPDATE loty set waga_bagazy=new_bagaz where loty.id_lot=:OLD.id_lot;
            UPDATE loty set przewidywany_zysk=new_cena where loty.id_lot=:OLD.id_lot;

        WHEN INSERTING THEN
            SELECT wolne_miejsca INTO old_w_miejsca FROM LOTY WHERE loty.id_lot=:NEW.ID_LOT;
            old_w_miejsca:=old_w_miejsca-1;
            UPDATE LOTY SET WOLNE_MIEJSCA=old_w_miejsca WHERE loty.id_lot=:NEW.ID_LOT;

        WHEN DELETING THEN
            SELECT wolne_miejsca INTO old_w_miejsca FROM LOTY WHERE loty.id_lot=:OLD.ID_LOT;
            old_w_miejsca:=old_w_miejsca+1;
            UPDATE LOTY SET WOLNE_MIEJSCA=old_w_miejsca WHERE loty.id_lot=:OLD.ID_LOT;
    END CASE;
END LOTY_BAGAZE_ZYSK;
/
ALTER TRIGGER "SZYMON"."LOTY_BAGAZE_ZYSK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LOTNISKA_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."LOTNISKA_TRG" 
BEFORE INSERT ON LOTNISKA 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_LOTNISKO IS NULL THEN
      SELECT LOTNISKA_SEQ.NEXTVAL INTO :NEW.ID_LOTNISKO FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."LOTNISKA_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LOTNISKA_UPPERCASE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."LOTNISKA_UPPERCASE" 
  BEFORE
    INSERT OR
    UPDATE OF miasto, kraj, kod_lotnisko
  ON lotniska
FOR EACH ROW

BEGIN
    :NEW.miasto := UPPER(:NEW.miasto);
    :NEW.kraj := UPPER(:NEW.kraj);
    :NEW.kod_lotnisko := UPPER(:NEW.kod_lotnisko);
END;
/
ALTER TRIGGER "SZYMON"."LOTNISKA_UPPERCASE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LOTY_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."LOTY_TRG" 
BEFORE INSERT ON LOTY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."LOTY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CZAS_CENA_LOTU_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."CZAS_CENA_LOTU_TRG" 
  BEFORE
    INSERT OR
    UPDATE OF data_przylotu, data_odlotu
  ON loty
FOR EACH ROW
DECLARE
   diff NUMBER(10, 0);
   cena NUMBER(10, 2);
BEGIN
    SELECT 24 * 60 * (:NEW.DATA_PRZYLOTU 
             - :NEW.DATA_ODLOTU) INTO diff FROM dual;
    cena := diff * 3.27 * 0.75;
    CASE
        WHEN INSERTING THEN
            :NEW.przewidywany_czas_lotu := diff;
            :NEW.cena_biletu := cena;
        WHEN UPDATING THEN
            :NEW.przewidywany_czas_lotu := diff;
            :NEW.cena_biletu := cena;
  END CASE;
END;
/
ALTER TRIGGER "SZYMON"."CZAS_CENA_LOTU_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger WOLNE_MIEJSCA_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."WOLNE_MIEJSCA_TRG" 
  BEFORE INSERT
  ON LOTY
  FOR EACH ROW
DECLARE
    w_miejsca       samoloty.liczba_miejsc%TYPE;
BEGIN   
    CASE
        WHEN INSERTING THEN
            SELECT liczba_miejsc INTO w_miejsca FROM samoloty WHERE samoloty.id_samolot=:NEW.ID_SAMOLOT;
            :NEW.wolne_miejsca := w_miejsca;
    END CASE;
END LOTY_BAGAZE_ZYSK;
/
ALTER TRIGGER "SZYMON"."WOLNE_MIEJSCA_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PASAZEROWIE_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."PASAZEROWIE_TRG" 
BEFORE INSERT ON PASAZEROWIE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_PASAZER IS NULL THEN
      SELECT PASAZEROWIE_SEQ.NEXTVAL INTO :NEW.ID_PASAZER FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."PASAZEROWIE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SAMOLOTY_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."SAMOLOTY_TRG" 
BEFORE INSERT ON SAMOLOTY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_SAMOLOT IS NULL THEN
      SELECT SAMOLOTY_SEQ.NEXTVAL INTO :NEW.ID_SAMOLOT FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."SAMOLOTY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TYPY_BAGAZY_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."TYPY_BAGAZY_TRG" 
BEFORE INSERT ON TYPY_BAGAZY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."TYPY_BAGAZY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TYPY_SAMOLOTOW_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."TYPY_SAMOLOTOW_TRG" 
BEFORE INSERT ON TYPY_SAMOLOTOW 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_TYP IS NULL THEN
      SELECT TYPY_SAMOLOTOW_SEQ.NEXTVAL INTO :NEW.ID_TYP FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "SZYMON"."TYPY_SAMOLOTOW_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CREATE_NEW_USER_PROFILE_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "SZYMON"."CREATE_NEW_USER_PROFILE_TRG" 
  FOR INSERT 
  ON uzytkownicy
    COMPOUND TRIGGER 
    username uzytkownicy.username%TYPE;
    acc_type uzytkownicy.typ_konta%TYPE;
    AFTER EACH ROW IS
        BEGIN
            username := :new.username;
            acc_type := :new.typ_konta;
        END AFTER EACH ROW;
    AFTER STATEMENT IS
        BEGIN
            IF acc_type = 0 THEN
                user_profile.user_edit(username, username, '', '', '');
            END IF;
    END AFTER STATEMENT;
END CREATE_NEW_USER_PROFILE_TRG;
/
ALTER TRIGGER "SZYMON"."CREATE_NEW_USER_PROFILE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Procedure ADD_USER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "SZYMON"."ADD_USER" (
    in_username IN UZYTKOWNICY.USERNAME%TYPE,
    in_pass IN UZYTKOWNICY.PASS%TYPE)
    IS 
BEGIN
    INSERT INTO uzytkownicy ("ID_UZYTKOWNIK", "USERNAME", "PASS", "TYP_KONTA")
    VALUES (UZYTKOWNICY_SEQ.nextval, in_username, in_pass, 0);
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure DATE_TEST
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "SZYMON"."DATE_TEST" (
c1 OUT SYS_REFCURSOR)
AS 
BEGIN

OPEN c1 FOR
    SELECT do_eleganckiej_daty(data_odlotu) data_odlotu from loty;

END DATE_TEST;

/
--------------------------------------------------------
--  DDL for Procedure ELEGANCKI_INSERT_BILETU
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "SZYMON"."ELEGANCKI_INSERT_BILETU" (
    in_waga_bagazu_podrecznego IN bagaze.waga_bagazu_podrecznego%TYPE,
    in_waga_bagazu_rejestrowanego IN bagaze.waga_bagazu_rejestrowanego%TYPE,
    in_id_pasazer IN pasazerowie.id_pasazer%TYPE,
    in_id_lot IN loty.id_lot%TYPE,
    in_cena IN bilety.cena%TYPE)
    IS 
    out_id bagaze.id_bagaz%TYPE;
    old_w_miejsca bilety.miejsce%TYPE;
BEGIN
    SELECT wolne_miejsca INTO old_w_miejsca FROM LOTY WHERE loty.id_lot=in_id_lot;
    magiczny_insert_bagazu(in_waga_bagazu_podrecznego, in_waga_bagazu_rejestrowanego, out_id);
    INSERT INTO bilety ("ID_BILET", "ID_PASAZER", "ID_LOT", "ID_BAGAZ", "MIEJSCE", "CENA", "CZY_OPLACONY")
    VALUES (BILETY_SEQ.nextval, in_id_pasazer, in_id_lot, out_id, old_w_miejsca, in_cena, 0);
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure FIND_FLIGHT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "SZYMON"."FIND_FLIGHT" (
    c1 OUT SYS_REFCURSOR,
    in_odlot_kraj IN lotniska.kraj%TYPE,
    in_odlot_miasto IN lotniska.miasto%TYPE,
    in_przylot_kraj IN lotniska.kraj%TYPE,
    in_przylot_miasto IN lotniska.miasto%TYPE)
    AS 
choice number;
BEGIN
choice := xd(in_odlot_kraj, in_odlot_miasto, in_przylot_kraj, in_przylot_miasto); 
IF choice=1 THEN
OPEN c1 FOR
    SELECT id_lot, kraj_odlotu, miasto_odlotu, kraj_przylotu, miasto_przylotu,
    do_eleganckiej_daty(data_odlotu) data_odlotu, do_eleganckiej_daty(data_przylotu) data_przylotu, przewidywany_czas_lotu, cena_biletu FROM
    (SELECT id_lot, l_odl.kraj as kraj_odlotu, l_odl.miasto as miasto_odlotu, l_p.kraj as kraj_przylotu, l_p.miasto as miasto_przylotu, 
    data_odlotu, data_przylotu, przewidywany_czas_lotu, cena_biletu, wolne_miejsca FROM 
    (((loty INNER JOIN LOTNISKA l_odl ON loty.id_miejsca_odlotu=l_odl.id_lotnisko)
    INNER JOIN LOTNISKA l_p ON loty.id_miejsca_przylotu=l_p.id_lotnisko )))
    WHERE (kraj_odlotu = in_odlot_kraj OR miasto_odlotu = in_odlot_miasto) AND 
    (kraj_przylotu = in_przylot_kraj OR miasto_przylotu = in_przylot_miasto)
    AND (wolne_miejsca > 0)
    ORDER BY data_odlotu;
ELSIF choice=2 THEN
OPEN c1 FOR
    SELECT id_lot, kraj_odlotu, miasto_odlotu, kraj_przylotu, miasto_przylotu,
    do_eleganckiej_daty(data_odlotu) data_odlotu, do_eleganckiej_daty(data_przylotu) data_przylotu, przewidywany_czas_lotu, cena_biletu FROM
    (SELECT id_lot, l_odl.kraj as kraj_odlotu, l_odl.miasto as miasto_odlotu, l_p.kraj as kraj_przylotu, l_p.miasto as miasto_przylotu, 
    data_odlotu, data_przylotu, przewidywany_czas_lotu, cena_biletu, wolne_miejsca FROM 
    (((loty INNER JOIN LOTNISKA l_odl ON loty.id_miejsca_odlotu=l_odl.id_lotnisko)
    INNER JOIN LOTNISKA l_p ON loty.id_miejsca_przylotu=l_p.id_lotnisko )))
    WHERE (kraj_odlotu = in_odlot_kraj OR miasto_odlotu = in_odlot_miasto)
    AND wolne_miejsca > 0;
ELSIF choice=3 THEN
OPEN c1 FOR
    SELECT id_lot, kraj_odlotu, miasto_odlotu, kraj_przylotu, miasto_przylotu,
    do_eleganckiej_daty(data_odlotu) data_odlotu, do_eleganckiej_daty(data_przylotu) data_przylotu, przewidywany_czas_lotu, cena_biletu FROM
    (SELECT id_lot, l_odl.kraj as kraj_odlotu, l_odl.miasto as miasto_odlotu, l_p.kraj as kraj_przylotu, l_p.miasto as miasto_przylotu, 
    data_odlotu, data_przylotu, przewidywany_czas_lotu, cena_biletu, wolne_miejsca FROM 
    (((loty INNER JOIN LOTNISKA l_odl ON loty.id_miejsca_odlotu=l_odl.id_lotnisko)
    INNER JOIN LOTNISKA l_p ON loty.id_miejsca_przylotu=l_p.id_lotnisko )))
    WHERE (kraj_przylotu = in_przylot_kraj OR miasto_przylotu = in_przylot_miasto) 
    AND (wolne_miejsca > 0)
    ORDER BY data_odlotu;
END IF;
END FIND_FLIGHT;

/
--------------------------------------------------------
--  DDL for Procedure GET_CENA_BILETU
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "SZYMON"."GET_CENA_BILETU" (
    in_id_lot IN LOTY.ID_LOT%TYPE,
    out_cena OUT LOTY.CENA_BILETU%TYPE)
    IS 
BEGIN
    SELECT CENA_BILETU into out_cena from loty where id_lot = in_id_lot;
END;

/
--------------------------------------------------------
--  DDL for Procedure GET_DATA_FOR_PDF
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "SZYMON"."GET_DATA_FOR_PDF" (
        c1 OUT SYS_REFCURSOR,
        in_id_bilet bilety.ID_BILET%TYPE)
        AS
        BEGIN
        OPEN c1 FOR
            SELECT
                rn, id_bilet, imie, nazwisko, cena, miejsce, miejsce_odlotu, miejsce_przylotu, do_eleganckiej_daty(data_odlotu) data_odlotu, typ
            FROM
                (SELECT rownum  rn, id_bilet, bilety.id_pasazer, imie, nazwisko, bilety.id_lot, (l_odl.MIASTO || '/' || l_odl.KRAJ) miejsce_odlotu, (l_p.MIASTO || '/' || l_p.KRAJ) miejsce_przylotu, data_odlotu, bagaze.id_bagaz, bagaze.waga_bagazu_rejestrowanego, typy_bagazy.typ , miejsce, cena, czy_oplacony FROM  
                (((((bilety INNER JOIN PASAZEROWIE ON bilety.id_pasazer=pasazerowie.id_pasazer)
                INNER JOIN loty ON bilety.id_lot=loty.id_lot)
                INNER JOIN lotniska l_odl ON loty.id_miejsca_odlotu=l_odl.id_lotnisko)
                INNER JOIN lotniska l_p ON loty.id_miejsca_przylotu=l_p.id_lotnisko)
                INNER JOIN bagaze ON bilety.id_bagaz=bagaze.id_bagaz)
                INNER JOIN typy_bagazy ON bagaze.id_typ_bagazu=typy_bagazy.id_typ_bagaz             WHERE
                bilety.id_bilet=in_id_bilet);

    END GET_DATA_FOR_PDF;

/
--------------------------------------------------------
--  DDL for Procedure GET_PASAZER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "SZYMON"."GET_PASAZER" (
    in_id_uzytkownik IN pasazerowie.id_uzytkownik%TYPE,
    out_id_pasazer OUT pasazerowie.id_pasazer%TYPE)
    IS 
BEGIN
    SELECT id_pasazer into out_id_pasazer from pasazerowie where id_uzytkownik=in_id_uzytkownik;
END;

/
--------------------------------------------------------
--  DDL for Procedure MAGICZNY_INSERT_BAGAZU
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "SZYMON"."MAGICZNY_INSERT_BAGAZU" (
    in_waga_bagazu_podrecznego IN bagaze.waga_bagazu_podrecznego%TYPE,
    in_waga_bagazu_rejestrowanego IN bagaze.waga_bagazu_rejestrowanego%TYPE,
    out_id OUT bagaze.id_bagaz%TYPE)
    IS 
BEGIN
    out_id := BAGAZE_SEQ.nextval;
    INSERT INTO bagaze ("ID_BAGAZ", "ID_TYP_BAGAZU", "WAGA_BAGAZU_PODRECZNEGO", "WAGA_BAGAZU_REJESTROWANEGO")
    VALUES (out_id, '', in_waga_bagazu_podrecznego, in_waga_bagazu_rejestrowanego);
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure OPLAC_BILET
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "SZYMON"."OPLAC_BILET" (
    in_id_bilet IN bilety.id_bilet%TYPE)
    IS 
BEGIN
    UPDATE bilety SET czy_oplacony = 1 WHERE id_bilet=in_id_bilet;
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Package BAGAZE_DIU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "SZYMON"."BAGAZE_DIU" AS
    PROCEDURE BAGAZE_DELETE(
        in_id_bagaz IN BAGAZE.ID_BAGAZ%TYPE);
    PROCEDURE BAGAZE_INSERT(
        in_waga_bagazu_podrecznego IN BAGAZE.WAGA_BAGAZU_PODRECZNEGO%TYPE,
        in_waga_bagazu_rejestrowanego IN BAGAZE.WAGA_BAGAZU_REJESTROWANEGO%TYPE);
    PROCEDURE BAGAZE_UPDATE(
        in_id_bagaz IN BAGAZE.ID_BAGAZ%TYPE,
        in_waga_bagazu_podrecznego IN BAGAZE.WAGA_BAGAZU_PODRECZNEGO%TYPE,
        in_waga_bagazu_rejestrowanego IN BAGAZE.WAGA_BAGAZU_REJESTROWANEGO%TYPE);
    PROCEDURE GET_NUMBER_OF_ROWS(wyjscie OUT NUMBER);
    PROCEDURE GET_FROM_TABLE(
        c1 OUT SYS_REFCURSOR,
        in_start IN NUMBER,
        in_stop IN NUMBER,
        in_search IN NUMBER);
END BAGAZE_DIU;

/
--------------------------------------------------------
--  DDL for Package BILETY_DIU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "SZYMON"."BILETY_DIU" AS
    PROCEDURE BILETY_DELETE(
        in_id_bilet IN bilety.id_bilet%TYPE);
    PROCEDURE BILETY_INSERT(
        in_pasazer IN bilety.id_pasazer%TYPE,
        in_lot IN bilety.id_lot%TYPE,
        in_bagaz IN bilety.id_bagaz%TYPE,
        in_miejsce IN bilety.cena%TYPE,
        in_cena IN bilety.cena%TYPE,
        in_oplacony IN bilety.czy_oplacony%TYPE);
    PROCEDURE BILETY_UPDATE(
        in_id_bilet IN bilety.id_bilet%TYPE,
        in_pasazer IN bilety.id_pasazer%TYPE,
        in_lot IN bilety.id_lot%TYPE,
        in_bagaz IN bilety.id_bagaz%TYPE,
        in_miejsce IN bilety.cena%TYPE,
        in_cena IN bilety.cena%TYPE,
        in_oplacony IN bilety.czy_oplacony%TYPE);
    PROCEDURE GET_NUMBER_OF_ROWS(wyjscie OUT NUMBER);
    PROCEDURE GET_FROM_TABLE(
        c1 OUT SYS_REFCURSOR,
        in_start IN NUMBER,
        in_stop IN NUMBER,
        in_search IN NUMBER);
        
    PROCEDURE OPLAC_BILET(
    in_id_bilet IN bilety.id_bilet%TYPE);

END BILETY_DIU;

/
--------------------------------------------------------
--  DDL for Package LOTNISKA_DIU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "SZYMON"."LOTNISKA_DIU" AS
    PROCEDURE LOTNISKO_DELETE(
        in_id_lotnisko IN LOTNISKA.ID_LOTNISKO%TYPE);
    PROCEDURE LOTNISKO_INSERT(
        in_kod IN LOTNISKA.KOD_LOTNISKO%TYPE,
        in_miasto IN LOTNISKA.MIASTO%TYPE,
        in_kraj IN LOTNISKA.KRAJ%TYPE);
    PROCEDURE LOTNISKO_UPDATE(
        in_id_lotnisko IN LOTNISKA.ID_LOTNISKO%TYPE,
        in_kod IN LOTNISKA.KOD_LOTNISKO%TYPE,
        in_miasto IN LOTNISKA.MIASTO%TYPE,
        in_kraj IN LOTNISKA.KRAJ%TYPE);
    PROCEDURE GET_NUMBER_OF_ROWS(wyjscie OUT NUMBER);
    PROCEDURE GET_FROM_TABLE(
        c1 OUT SYS_REFCURSOR,
        in_start IN NUMBER,
        in_stop IN NUMBER,
        in_search IN VARCHAR);
END LOTNISKA_DIU;

/
--------------------------------------------------------
--  DDL for Package LOTY_DIU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "SZYMON"."LOTY_DIU" as 
    PROCEDURE LOTY_DELETE(
        in_id_lot IN LOTY.ID_LOT%TYPE);
    PROCEDURE LOTY_INSERT(
        in_id_miejsca_odlotu IN LOTY.ID_MIEJSCA_ODLOTU%TYPE,
        in_id_miejsca_przylotu IN LOTY.ID_MIEJSCA_PRZYLOTU%TYPE,
        in_id_samolot IN LOTY.ID_SAMOLOT%TYPE,
        in_data_odlotu IN VARCHAR,
        in_data_przylotu IN VARCHAR);
    PROCEDURE LOTY_UPDATE(
        in_id_lot IN LOTY.ID_LOT%TYPE,
        in_id_miejsca_odlotu IN LOTY.ID_MIEJSCA_ODLOTU%TYPE,
        in_id_miejsca_przylotu IN LOTY.ID_MIEJSCA_PRZYLOTU%TYPE,
        in_id_samolot IN LOTY.ID_SAMOLOT%TYPE,
        in_data_odlotu IN VARCHAR,
        in_data_przylotu IN VARCHAR);
    PROCEDURE GET_NUMBER_OF_ROWS(wyjscie OUT NUMBER);
    PROCEDURE GET_FROM_TABLE(
        c1 OUT SYS_REFCURSOR,
        in_start IN NUMBER,
        in_stop IN NUMBER,
        in_search IN NUMBER);

    PROCEDURE GET_LOTNISKO(
        c1 OUT SYS_REFCURSOR);

    PROCEDURE GET_SAMOLOT(
        c1 OUT SYS_REFCURSOR);
end LOTY_DIU;

/
--------------------------------------------------------
--  DDL for Package PRACOWNICY_DIU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "SZYMON"."PRACOWNICY_DIU" AS
    PROCEDURE PRACOWNIK_DELETE(
        in_id_pracownik IN PRACOWNICY.ID_PRACOWNIK%TYPE);

    PROCEDURE PRACOWNIK_INSERT(
        in_imie IN PRACOWNICY.IMIE%TYPE,
        in_nazwisko IN PRACOWNICY.NAZWISKO%TYPE,
        in_stanowisko IN PRACOWNICY.STANOWISKO%TYPE,
        in_pensja IN PRACOWNICY.PENSJA%TYPE);

    PROCEDURE PRACOWNIK_UPDATE(
        in_id_pracownik IN PRACOWNICY.ID_PRACOWNIK%TYPE,
        in_imie IN PRACOWNICY.IMIE%TYPE,
        in_nazwisko IN PRACOWNICY.NAZWISKO%TYPE,
        in_stanowisko IN PRACOWNICY.STANOWISKO%TYPE,
        in_pensja IN PRACOWNICY.PENSJA%TYPE);

    PROCEDURE GET_NUMBER_OF_ROWS(
        wyjscie OUT NUMBER);

    PROCEDURE GET_FROM_TABLE(
        c1 OUT SYS_REFCURSOR,
        in_start IN NUMBER,
        in_stop IN NUMBER,
        in_search IN VARCHAR);

END PRACOWNICY_DIU;

/
--------------------------------------------------------
--  DDL for Package SAMOLOTY_DIU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "SZYMON"."SAMOLOTY_DIU" AS
    PROCEDURE SAMOLOT_DELETE(
        in_id_samolot IN SAMOLOTY.ID_SAMOLOT%TYPE);

    PROCEDURE SAMOLOT_INSERT(
        in_typ IN SAMOLOTY.ID_TYP%TYPE,
        in_marka IN SAMOLOTY.MARKA%TYPE,
        in_model IN SAMOLOTY.S_MODEL%TYPE,
        in_miejsca IN SAMOLOTY.LICZBA_MIEJSC%TYPE);


    PROCEDURE SAMOLOT_UPDATE(
        in_id_samolot IN SAMOLOTY.ID_SAMOLOT%TYPE,
        in_typ IN SAMOLOTY.ID_TYP%TYPE,
        in_marka IN SAMOLOTY.MARKA%TYPE,
        in_model IN SAMOLOTY.S_MODEL%TYPE,
        in_miejsca IN SAMOLOTY.LICZBA_MIEJSC%TYPE);

    PROCEDURE GET_NUMBER_OF_ROWS(
        wyjscie OUT NUMBER);

    PROCEDURE GET_FROM_TABLE(
        c1 OUT SYS_REFCURSOR,
        in_start IN NUMBER,
        in_stop IN NUMBER,
        in_search IN VARCHAR);

    PROCEDURE GET_TYP(
        c1 OUT SYS_REFCURSOR);

END SAMOLOTY_DIU;

/
--------------------------------------------------------
--  DDL for Package SEARCH_FLIGHT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "SZYMON"."SEARCH_FLIGHT" AS 
    PROCEDURE COUNTRIES(c1 OUT SYS_REFCURSOR);
    PROCEDURE CITIES(c1 OUT SYS_REFCURSOR);
END SEARCH_FLIGHT;

/
--------------------------------------------------------
--  DDL for Package STATYSTYKA_OPISOWA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "SZYMON"."STATYSTYKA_OPISOWA" AS
    PROCEDURE najczesciej_wybierane_bagaze(c1 OUT SYS_REFCURSOR);

    PROCEDURE najczesciej_wybierane_miejsca(c1 OUT SYS_REFCURSOR);

    PROCEDURE pracownicy_zarobki(c1 OUT SYS_REFCURSOR);

    PROCEDURE top_5_klientow(c1 OUT SYS_REFCURSOR);

    PROCEDURE ostatnie_zarobki(ostatni_tydzien OUT NUMBER, ostatni_miesiac OUT NUMBER, ostatni_kwartal OUT NUMBER);
END STATYSTYKA_OPISOWA;

/
--------------------------------------------------------
--  DDL for Package USER_PROFILE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "SZYMON"."USER_PROFILE" AS 
    PROCEDURE USER_FIND(
        c1 OUT sys_refcursor,
        in_username IN uzytkownicy.username%TYPE);
        
    PROCEDURE USER_EDIT(
        in_username IN uzytkownicy.username%TYPE,
        in_name IN pasazerowie.imie%TYPE,
        in_surname IN pasazerowie.nazwisko%TYPE,
        in_e_mail IN pasazerowie.e_mail%TYPE,
        in_number IN pasazerowie.nr_telefonu%TYPE);
        
    PROCEDURE USER_DEL(
        in_username IN uzytkownicy.username%TYPE);
        
    PROCEDURE USER_BOOKINGS(
        c1 OUT SYS_REFCURSOR,
        in_username IN  uzytkownicy.username%TYPE);
        
     PROCEDURE USER_UPCOMING(
        c1 OUT SYS_REFCURSOR,
        in_username IN  uzytkownicy.username%TYPE);
END USER_PROFILE;

/
--------------------------------------------------------
--  DDL for Package USERUTILS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "SZYMON"."USERUTILS" AS
    PROCEDURE ADD_USER(
        in_username IN UZYTKOWNICY.USERNAME%TYPE,
        in_pass IN UZYTKOWNICY.PASS%TYPE);

    PROCEDURE FIND_USER(
        c1 OUT sys_refcursor,
        in_username IN UZYTKOWNICY.USERNAME%TYPE);

    PROCEDURE CHECK_IF_EXISTS(
        c1 OUT sys_refcursor,
        in_username IN UZYTKOWNICY.USERNAME%TYPE);
END USERUTILS;

/
--------------------------------------------------------
--  DDL for Package UZYTKOWNICY_DIU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "SZYMON"."UZYTKOWNICY_DIU" AS
    PROCEDURE UZYTKOWNIK_DELETE(
        in_id_uzytkownik IN UZYTKOWNICY.ID_UZYTKOWNIK%TYPE);

    PROCEDURE UZYTKOWNIK_INSERT(
        in_username IN UZYTKOWNICY.USERNAME%TYPE,
        in_pass IN UZYTKOWNICY.PASS%TYPE,
        in_typ_konta IN UZYTKOWNICY.TYP_KONTA%TYPE);

    PROCEDURE UZYTKOWNIK_UPDATE(
        in_id_uzytkownik IN UZYTKOWNICY.ID_UZYTKOWNIK%TYPE,
        in_username IN UZYTKOWNICY.USERNAME%TYPE,
        in_pass IN UZYTKOWNICY.PASS%TYPE,
        in_typ_konta IN UZYTKOWNICY.TYP_KONTA%TYPE);

    PROCEDURE GET_NUMBER_OF_ROWS(
        wyjscie OUT NUMBER);

    PROCEDURE GET_FROM_TABLE(
        c1 OUT SYS_REFCURSOR,
        in_start IN NUMBER,
        in_stop IN NUMBER,
        in_search IN VARCHAR);

END UZYTKOWNICY_DIU;

/
--------------------------------------------------------
--  DDL for Package Body BAGAZE_DIU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "SZYMON"."BAGAZE_DIU" AS 
    PROCEDURE BAGAZE_DELETE(
        in_id_bagaz IN BAGAZE.ID_BAGAZ%TYPE)
        IS
        BEGIN
            DELETE FROM BAGAZE WHERE ID_BAGAZ = in_id_bagaz;
            COMMIT;
    END BAGAZE_DELETE;
    PROCEDURE BAGAZE_INSERT(
        in_waga_bagazu_podrecznego IN BAGAZE.WAGA_BAGAZU_PODRECZNEGO%TYPE,
        in_waga_bagazu_rejestrowanego IN BAGAZE.WAGA_BAGAZU_REJESTROWANEGO%TYPE)
        IS
        BEGIN
            INSERT INTO BAGAZE(id_bagaz, waga_bagazu_podrecznego, waga_bagazu_rejestrowanego)
            VALUES(BAGAZE_SEQ.nextval, in_waga_bagazu_podrecznego, in_waga_bagazu_rejestrowanego);
            COMMIT;
    END BAGAZE_INSERT;
    PROCEDURE BAGAZE_UPDATE(
        in_id_bagaz IN BAGAZE.ID_BAGAZ%TYPE,
        in_waga_bagazu_podrecznego IN BAGAZE.WAGA_BAGAZU_PODRECZNEGO%TYPE,
        in_waga_bagazu_rejestrowanego IN BAGAZE.WAGA_BAGAZU_REJESTROWANEGO%TYPE)
        IS
        BEGIN
        IF in_waga_bagazu_podrecznego IS NOT NULL THEN
            UPDATE bagaze SET waga_bagazu_podrecznego = in_waga_bagazu_podrecznego WHERE id_bagaz = in_id_bagaz;
        END IF;
        IF in_waga_bagazu_rejestrowanego IS NOT NULL THEN
            UPDATE bagaze SET waga_bagazu_rejestrowanego = in_waga_bagazu_rejestrowanego WHERE id_bagaz = in_id_bagaz;
        END IF;
        COMMIT;
    END BAGAZE_UPDATE;
    PROCEDURE GET_NUMBER_OF_ROWS(wyjscie OUT NUMBER)
        AS
        BEGIN
        SELECT
        COUNT(*) INTO wyjscie
        FROM bagaze;
    END GET_NUMBER_OF_ROWS;
    PROCEDURE GET_FROM_TABLE(
        c1 OUT SYS_REFCURSOR,
        in_start IN NUMBER,
        in_stop IN NUMBER,
        in_search IN NUMBER)
        AS
        BEGIN
        OPEN c1 FOR
            SELECT
                rn, id_bagaz, typ, waga_bagazu_podrecznego, waga_bagazu_rejestrowanego
            FROM
                (SELECT rownum rn, id_bagaz, typ, waga_bagazu_podrecznego, waga_bagazu_rejestrowanego FROM bagaze INNER JOIN TYPY_BAGAZY ON bagaze.id_typ_bagazu=typy_bagazy.id_typ_bagaz WHERE id_bagaz LIKE '%' || in_search || '%' ORDER BY id_bagaz)
            WHERE
                rn BETWEEN in_start AND in_stop;
    END GET_FROM_TABLE;
END BAGAZE_DIU;

/
--------------------------------------------------------
--  DDL for Package Body BILETY_DIU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "SZYMON"."BILETY_DIU" AS
    PROCEDURE BILETY_DELETE(
        in_id_bilet IN bilety.id_bilet%TYPE)
        IS
        BEGIN
            DELETE FROM bilety WHERE id_bilet = in_id_bilet;
    END BILETY_DELETE;
    
    PROCEDURE BILETY_INSERT(
        in_pasazer IN bilety.id_pasazer%TYPE,
        in_lot IN bilety.id_lot%TYPE,
        in_bagaz IN bilety.id_bagaz%TYPE,
        in_miejsce IN bilety.cena%TYPE,
        in_cena IN bilety.cena%TYPE,
        in_oplacony IN bilety.czy_oplacony%TYPE)
        IS
        BEGIN
            INSERT INTO bilety
            VALUES(BILETY_SEQ.nextval, in_pasazer, in_lot, in_bagaz, in_miejsce, in_cena, in_oplacony);
    END BILETY_INSERT;
    
    PROCEDURE BILETY_UPDATE(
        in_id_bilet IN bilety.id_bilet%TYPE,
        in_pasazer IN bilety.id_pasazer%TYPE,
        in_lot IN bilety.id_lot%TYPE,
        in_bagaz IN bilety.id_bagaz%TYPE,
        in_miejsce IN bilety.cena%TYPE,
        in_cena IN bilety.cena%TYPE,
        in_oplacony IN bilety.czy_oplacony%TYPE)
        IS
        BEGIN
            IF in_pasazer IS NOT NULL THEN
                UPDATE bilety SET id_pasazer = in_pasazer WHERE id_bilet = in_id_bilet;
            END IF;
            IF in_lot IS NOT NULL THEN
                UPDATE bilety SET id_lot = in_lot WHERE id_bilet = in_id_bilet;
            END IF;
            IF in_bagaz IS NOT NULL THEN
                UPDATE bilety SET id_bagaz = in_bagaz WHERE id_bilet = in_id_bilet;
            END IF;
            IF in_miejsce IS NOT NULL THEN
                UPDATE bilety SET miejsce = in_miejsce WHERE id_bilet = in_id_bilet;
            END IF;
            IF in_cena IS NOT NULL THEN
                UPDATE bilety SET cena = in_cena WHERE id_bilet = in_id_bilet;
            END IF;
            IF in_oplacony IS NOT NULL THEN
                UPDATE bilety SET czy_oplacony = in_oplacony WHERE id_bilet = in_id_bilet;
            END IF;
    END BILETY_UPDATE;
    
    PROCEDURE GET_NUMBER_OF_ROWS(wyjscie OUT NUMBER)
        AS
        BEGIN
        SELECT
        COUNT(*) INTO wyjscie
        FROM bilety;
    END GET_NUMBER_OF_ROWS;
    
    PROCEDURE GET_FROM_TABLE(
        c1 OUT SYS_REFCURSOR,
        in_start IN NUMBER,
        in_stop IN NUMBER,
        in_search IN NUMBER)
        AS
        BEGIN
        OPEN c1 FOR
            SELECT
                rn, id_bilet, id_pasazer,(IMIE || ' ' || NAZWISKO) pasazer, id_lot, (miejsce_odlotu || ' ' || miejsce_przylotu || ' ' || do_eleganckiej_daty(data_odlotu)) lot, id_bagaz, (WAGA_BAGAZU_REJESTROWANEGO || ' ' || TYP) bagaz, miejsce, cena, czy_oplacony
            FROM
                (SELECT rownum  rn, id_bilet, bilety.id_pasazer, imie, nazwisko, bilety.id_lot, l_odl.kod_lotnisko miejsce_odlotu, l_p.kod_lotnisko miejsce_przylotu, data_odlotu, bagaze.id_bagaz, bagaze.waga_bagazu_rejestrowanego, typy_bagazy.typ , miejsce, cena, czy_oplacony FROM  
                ((((((bilety INNER JOIN PASAZEROWIE ON bilety.id_pasazer=pasazerowie.id_pasazer)
                INNER JOIN loty ON bilety.id_lot=loty.id_lot)
                INNER JOIN lotniska l_odl ON loty.id_miejsca_odlotu=l_odl.id_lotnisko)
                INNER JOIN lotniska l_p ON loty.id_miejsca_przylotu=l_p.id_lotnisko)
                INNER JOIN bagaze ON bilety.id_bagaz=bagaze.id_bagaz)
                INNER JOIN typy_bagazy ON bagaze.id_typ_bagazu=typy_bagazy.id_typ_bagaz)
                WHERE id_bilet LIKE '%' || in_search || '%'
                ORDER BY id_bilet)
            WHERE
                rn BETWEEN in_start AND in_stop;
    END GET_FROM_TABLE;
    
     PROCEDURE OPLAC_BILET(
    in_id_bilet IN bilety.id_bilet%TYPE)
    IS 
    BEGIN
    UPDATE bilety SET czy_oplacony = 1 WHERE id_bilet=in_id_bilet;
    COMMIT;
END;
END BILETY_DIU;

/
--------------------------------------------------------
--  DDL for Package Body LOTNISKA_DIU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "SZYMON"."LOTNISKA_DIU" AS
    PROCEDURE LOTNISKO_DELETE(
        in_id_lotnisko IN LOTNISKA.ID_LOTNISKO%TYPE)
        IS
        BEGIN
            DELETE FROM LOTNISKA WHERE id_lotnisko = in_id_lotnisko;
            COMMIT;
    END LOTNISKO_DELETE;

    PROCEDURE LOTNISKO_INSERT(
        in_kod IN LOTNISKA.KOD_LOTNISKO%TYPE,
        in_miasto IN LOTNISKA.MIASTO%TYPE,
        in_kraj IN LOTNISKA.KRAJ%TYPE)
        IS
        BEGIN
            INSERT INTO LOTNISKA
            VALUES (LOTNISKA_SEQ.nextval, in_kod, in_miasto, in_kraj);
            COMMIT;
        END LOTNISKO_INSERT;

    PROCEDURE LOTNISKO_UPDATE(
        in_id_lotnisko IN LOTNISKA.ID_LOTNISKO%TYPE,
        in_kod IN LOTNISKA.KOD_LOTNISKO%TYPE,
        in_miasto IN LOTNISKA.MIASTO%TYPE,
        in_kraj IN LOTNISKA.KRAJ%TYPE)
        IS
        BEGIN
        IF in_kod IS NOT NULL THEN
            UPDATE lotniska SET kod_lotnisko = in_kod WHERE id_lotnisko = in_id_lotnisko;
        END IF;
        IF in_miasto IS NOT NULL THEN
            UPDATE lotniska SET miasto = in_miasto WHERE id_lotnisko = in_id_lotnisko;
        END IF;
        IF in_kraj IS NOT NULL THEN
            UPDATE lotniska SET kraj = in_kraj WHERE id_lotnisko = in_id_lotnisko;
        END IF;
        COMMIT;
    END LOTNISKO_UPDATE;

    PROCEDURE GET_NUMBER_OF_ROWS(wyjscie OUT NUMBER)
        AS
        BEGIN
        SELECT
        COUNT(*) INTO wyjscie
        FROM lotniska;
    END GET_NUMBER_OF_ROWS;

    PROCEDURE GET_FROM_TABLE(
        c1 OUT SYS_REFCURSOR,
        in_start IN NUMBER,
        in_stop IN NUMBER,
        in_search IN VARCHAR)
        AS
        BEGIN
        OPEN c1 FOR
            SELECT
                rn, id_lotnisko, kod_lotnisko, miasto, kraj
            FROM
                (SELECT rownum rn, id_lotnisko, kod_lotnisko, miasto, kraj FROM LOTNISKA WHERE kod_lotnisko LIKE '%' || in_search || '%' ORDER BY id_lotnisko)
            WHERE
                rn BETWEEN in_start AND in_stop;
    END GET_FROM_TABLE;

END LOTNISKA_DIU;

/
--------------------------------------------------------
--  DDL for Package Body LOTY_DIU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "SZYMON"."LOTY_DIU" AS
    PROCEDURE LOTY_DELETE(
        in_id_lot IN LOTY.ID_LOT%TYPE)
        IS
        BEGIN
            DELETE FROM LOTY WHERE ID_LOT = in_id_lot;
            COMMIT;
    END LOTY_DELETE;
    PROCEDURE LOTY_INSERT(
        in_id_miejsca_odlotu IN LOTY.ID_MIEJSCA_ODLOTU%TYPE,
        in_id_miejsca_przylotu IN LOTY.ID_MIEJSCA_PRZYLOTU%TYPE,
        in_id_samolot IN LOTY.ID_SAMOLOT%TYPE,
        in_data_odlotu IN VARCHAR,
        in_data_przylotu IN VARCHAR)
        IS
        BEGIN
            INSERT INTO LOTY(id_lot, id_miejsca_odlotu, id_miejsca_przylotu, id_samolot, data_odlotu, data_przylotu, przewidywany_zysk, waga_bagazy)
            VALUES (LOTY_SEQ.nextval, in_id_miejsca_odlotu, in_id_miejsca_przylotu, in_id_samolot, TO_DATE(in_data_odlotu, 'YYYY-MM-DD HH24:MI'), TO_DATE(in_data_przylotu, 'YYYY-MM-DD HH24:MI'), '0', '0');
        COMMIT;
    END LOTY_INSERT;
    PROCEDURE LOTY_UPDATE(
        in_id_lot IN LOTY.ID_LOT%TYPE,
        in_id_miejsca_odlotu IN LOTY.ID_MIEJSCA_ODLOTU%TYPE,
        in_id_miejsca_przylotu IN LOTY.ID_MIEJSCA_PRZYLOTU%TYPE,
        in_id_samolot IN LOTY.ID_SAMOLOT%TYPE,
        in_data_odlotu IN VARCHAR,
        in_data_przylotu IN VARCHAR)
        IS
        BEGIN
        IF in_id_miejsca_odlotu IS NOT NULL THEN
            UPDATE loty SET id_miejsca_odlotu = in_id_miejsca_odlotu WHERE id_lot = in_id_lot;
        END IF;
        IF in_id_miejsca_przylotu IS NOT NULL THEN
            UPDATE loty SET id_miejsca_przylotu = in_id_miejsca_przylotu WHERE id_lot = in_id_lot;
        END IF;
        IF in_id_samolot IS NOT NULL THEN
            UPDATE loty SET id_samolot = in_id_samolot WHERE id_lot = in_id_lot;
        END IF;
        IF in_data_odlotu IS NOT NULL THEN
            UPDATE loty SET data_odlotu = TO_DATE(in_data_odlotu, 'YYYY-MM-DD HH24:MI') WHERE id_lot = in_id_lot;
        END IF;
        IF in_data_przylotu IS NOT NULL THEN
            UPDATE loty SET data_przylotu = TO_DATE(in_data_przylotu, 'YYYY-MM-DD HH24:MI') WHERE id_lot = in_id_lot;
        END IF;
        COMMIT;
    END LOTY_UPDATE;
    PROCEDURE GET_NUMBER_OF_ROWS(wyjscie OUT NUMBER)
        AS
        BEGIN
        SELECT
        COUNT(*) INTO wyjscie
        FROM loty;
    END GET_NUMBER_OF_ROWS;
    PROCEDURE GET_FROM_TABLE(
        c1 OUT SYS_REFCURSOR,
        in_start IN NUMBER,
        in_stop IN NUMBER,
        in_search IN NUMBER)
        AS
        BEGIN
        OPEN c1 FOR
            SELECT
                rn, id_lot, id_miejsca_odlotu, miejsce_odlotu, id_miejsca_przylotu, miejsce_przylotu, id_samolot, nazwa_samolotu,
                do_eleganckiej_daty(data_odlotu) data_odlotu, do_eleganckiej_daty(data_przylotu) data_przylotu, przewidywany_czas_lotu, waga_bagazy, przewidywany_zysk
            FROM
                (SELECT rownum rn, id_lot, id_miejsca_odlotu, l_odl.kod_lotnisko as miejsce_odlotu, id_miejsca_przylotu, l_p.kod_lotnisko as miejsce_przylotu, loty.id_samolot, samoloty.s_model as nazwa_samolotu, data_odlotu, data_przylotu, przewidywany_czas_lotu, waga_bagazy, przewidywany_zysk FROM 
                (((loty INNER JOIN LOTNISKA l_odl ON loty.id_miejsca_odlotu=l_odl.id_lotnisko)
                INNER JOIN LOTNISKA l_p ON loty.id_miejsca_przylotu=l_p.id_lotnisko )
                INNER JOIN SAMOLOTY ON loty.id_samolot=samoloty.id_samolot)
                WHERE id_lot LIKE '%' || in_search || '%'
                ORDER BY id_lot)
            WHERE
                rn BETWEEN in_start AND in_stop;
    END GET_FROM_TABLE;

    PROCEDURE GET_LOTNISKO(
        c1 OUT SYS_REFCURSOR)
        AS 
        BEGIN
        OPEN c1 FOR
            SELECT
                id_lotnisko, kod_lotnisko
            FROM
                lotniska;
    END GET_LOTNISKO;

    PROCEDURE GET_SAMOLOT(
        c1 OUT SYS_REFCURSOR)
        AS 
        BEGIN
        OPEN c1 FOR
            SELECT
                id_samolot, s_model
            FROM
                samoloty;
    END GET_SAMOLOT;

END LOTY_DIU;

/
--------------------------------------------------------
--  DDL for Package Body PRACOWNICY_DIU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "SZYMON"."PRACOWNICY_DIU" AS 

    PROCEDURE PRACOWNIK_DELETE(
        in_id_pracownik IN PRACOWNICY.ID_PRACOWNIK%TYPE)
        IS
        BEGIN
            DELETE FROM PRACOWNICY WHERE id_pracownik=in_id_pracownik;
            COMMIT;
    END PRACOWNIK_DELETE;

    PROCEDURE PRACOWNIK_INSERT(
        in_imie IN PRACOWNICY.IMIE%TYPE,
        in_nazwisko IN PRACOWNICY.NAZWISKO%TYPE,
        in_stanowisko IN PRACOWNICY.STANOWISKO%TYPE,
        in_pensja IN PRACOWNICY.PENSJA%TYPE)
        IS 
        BEGIN
            INSERT INTO pracownicy ("ID_PRACOWNIK", "IMIE", "NAZWISKO", "STANOWISKO", "PENSJA")
            VALUES (PRACOWNICY_SEQ.nextval, in_imie, in_nazwisko, in_stanowisko, in_pensja);
            COMMIT;
    END PRACOWNIK_INSERT;

    PROCEDURE PRACOWNIK_UPDATE(
        in_id_pracownik IN PRACOWNICY.ID_PRACOWNIK%TYPE,
        in_imie IN PRACOWNICY.IMIE%TYPE,
        in_nazwisko IN PRACOWNICY.NAZWISKO%TYPE,
        in_stanowisko IN PRACOWNICY.STANOWISKO%TYPE,
        in_pensja IN PRACOWNICY.PENSJA%TYPE)
        IS 
        BEGIN
        IF in_imie IS NOT NULL THEN
            UPDATE pracownicy SET imie=in_imie WHERE id_pracownik=in_id_pracownik;
        END IF;
        IF in_nazwisko IS NOT NULL THEN
            UPDATE pracownicy SET nazwisko=in_nazwisko WHERE id_pracownik=in_id_pracownik;
        END IF;
        IF in_stanowisko IS NOT NULL THEN
            UPDATE pracownicy SET stanowisko=in_stanowisko WHERE id_pracownik=in_id_pracownik;
        END IF;
        IF in_pensja IS NOT NULL THEN
            UPDATE pracownicy SET pensja=in_pensja WHERE id_pracownik=in_id_pracownik;
        END IF;
        COMMIT;

    END PRACOWNIK_UPDATE;

    PROCEDURE GET_NUMBER_OF_ROWS(wyjscie OUT NUMBER)
        AS 
        BEGIN
        SELECT
        COUNT(*) INTO wyjscie
        FROM pracownicy;
    END GET_NUMBER_OF_ROWS;

    PROCEDURE GET_FROM_TABLE(
        c1 OUT SYS_REFCURSOR,
        in_start IN NUMBER,
        in_stop IN NUMBER,
        in_search IN VARCHAR)
        AS 
        BEGIN
        OPEN c1 FOR
            SELECT
                rn, id_pracownik, imie, nazwisko, stanowisko, pensja
            FROM
                (SELECT rownum rn, id_pracownik, imie, nazwisko, stanowisko, pensja from pracownicy WHERE nazwisko LIKE '%' || in_search || '%' ORDER BY id_pracownik)
            WHERE 
                rn BETWEEN in_start AND in_stop;
    END GET_FROM_TABLE;

END PRACOWNICY_DIU;

/
--------------------------------------------------------
--  DDL for Package Body SAMOLOTY_DIU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "SZYMON"."SAMOLOTY_DIU" AS 
    PROCEDURE SAMOLOT_DELETE(
        in_id_samolot IN SAMOLOTY.ID_SAMOLOT%TYPE)
        IS
        BEGIN
            DELETE FROM SAMOLOTY WHERE id_samolot=in_id_samolot;
            COMMIT;
    END SAMOLOT_DELETE;

    PROCEDURE SAMOLOT_INSERT(
        in_typ IN SAMOLOTY.ID_TYP%TYPE,
        in_marka IN SAMOLOTY.MARKA%TYPE,
        in_model IN SAMOLOTY.S_MODEL%TYPE,
        in_miejsca IN SAMOLOTY.LICZBA_MIEJSC%TYPE)
        IS 
        BEGIN
            INSERT INTO SAMOLOTY ("ID_SAMOLOT", "ID_TYP", "MARKA", "S_MODEL", "LICZBA_MIEJSC")
            VALUES (SAMOLOTY_SEQ.nextval, in_typ, in_marka, in_model, in_miejsca);
            COMMIT;
    END SAMOLOT_INSERT;

    PROCEDURE SAMOLOT_UPDATE(
        in_id_samolot IN SAMOLOTY.ID_SAMOLOT%TYPE,
        in_typ IN SAMOLOTY.ID_TYP%TYPE,
        in_marka IN SAMOLOTY.MARKA%TYPE,
        in_model IN SAMOLOTY.S_MODEL%TYPE,
        in_miejsca IN SAMOLOTY.LICZBA_MIEJSC%TYPE)
        IS 
        BEGIN
        IF in_typ IS NOT NULL THEN
            UPDATE samoloty SET id_typ=in_typ WHERE id_samolot=in_id_samolot;
        END IF;
        IF in_marka IS NOT NULL THEN
            UPDATE samoloty SET marka=in_marka WHERE id_samolot=in_id_samolot;
        END IF;
        IF in_model IS NOT NULL THEN
            UPDATE samoloty SET S_MODEL=in_model WHERE id_samolot=in_id_samolot;
        END IF;
        IF in_miejsca IS NOT NULL THEN
          UPDATE samoloty SET liczba_miejsc=in_miejsca WHERE id_samolot=in_id_samolot;
        END IF;
        COMMIT;

    END SAMOLOT_UPDATE;

    PROCEDURE GET_NUMBER_OF_ROWS(wyjscie OUT NUMBER)
        AS 
        BEGIN
        SELECT
        COUNT(*) INTO wyjscie
        FROM samoloty;
    END GET_NUMBER_OF_ROWS;

    PROCEDURE GET_FROM_TABLE(
        c1 OUT SYS_REFCURSOR,
        in_start IN NUMBER,
        in_stop IN NUMBER,
        in_search IN VARCHAR)
        AS 
        BEGIN
        OPEN c1 FOR
            SELECT
                rn, id_samolot, id_typ, typ, marka, S_MODEL, liczba_miejsc
            FROM
                (SELECT rownum rn, id_samolot, samoloty.id_typ, typ, marka, S_MODEL, liczba_miejsc from samoloty INNER JOIN TYPY_SAMOLOTOW ON SAMOLOTY.ID_TYP = TYPY_SAMOLOTOW.ID_TYP WHERE S_MODEL LIKE '%' || in_search || '%' ORDER BY id_samolot)
            WHERE 
                rn BETWEEN in_start AND in_stop;
    END GET_FROM_TABLE;

    PROCEDURE GET_TYP(
        c1 OUT SYS_REFCURSOR)
        AS 
        BEGIN
        OPEN c1 FOR
            SELECT
                id_typ, typ
            FROM
                typy_samolotow;
    END GET_TYP;

END SAMOLOTY_DIU;

/
--------------------------------------------------------
--  DDL for Package Body SEARCH_FLIGHT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "SZYMON"."SEARCH_FLIGHT" AS

  PROCEDURE COUNTRIES(c1 OUT SYS_REFCURSOR) AS
  BEGIN
    OPEN c1 FOR
        SELECT kraj FROM lotniska;
  END COUNTRIES;

  PROCEDURE CITIES(c1 OUT SYS_REFCURSOR) AS
  BEGIN
    OPEN c1 FOR
        SELECT miasto FROM lotniska;
  END CITIES;

END SEARCH_FLIGHT;

/
--------------------------------------------------------
--  DDL for Package Body STATYSTYKA_OPISOWA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "SZYMON"."STATYSTYKA_OPISOWA" AS 
    PROCEDURE najczesciej_wybierane_bagaze(c1 OUT SYS_REFCURSOR)
        IS
        wszystkie_bagaze NUMBER(10,0);
        BEGIN
            select count(*) INTO wszystkie_bagaze FROM bagaze;
            OPEN c1 FOR
                select count(*) liczba, count(*)/wszystkie_bagaze procent, typ FROM bagaze INNER JOIN TYPY_BAGAZY ON BAGAZE.ID_TYP_BAGAZU=typy_bagazy.id_typ_bagaz group BY typ ORDER BY liczba DESC;     
    END najczesciej_wybierane_bagaze;

    PROCEDURE najczesciej_wybierane_miejsca(c1 OUT SYS_REFCURSOR)
        IS
        wszystkie_miejsca NUMBER(10,0);
        BEGIN
            select count(*) INTO wszystkie_miejsca FROM bilety;
            OPEN c1 FOR
            select liczba, procent, miejsce from
                (select count(*) liczba, count(*)/wszystkie_miejsca procent, concat(kraj || ' ', miasto) miejsce FROM bilety INNER JOIN loty ON bilety.id_lot=loty.id_lot inner join lotniska on loty.id_miejsca_przylotu=lotniska.id_lotnisko group by concat(kraj || ' ', miasto) order by liczba DESC) group BY liczba, procent, miejsce order by liczba DESC FETCH FIRST 5 ROWS ONLY;     
    END najczesciej_wybierane_miejsca;


PROCEDURE pracownicy_zarobki(c1 OUT SYS_REFCURSOR)
        IS
        BEGIN
            OPEN c1 FOR
        SELECT CASE 
         WHEN pensja <= 1000 THEN '1-1000' 
         WHEN pensja <= 3000 THEN '1001-3000'
         WHEN pensja <= 6000 THEN '3001-6000'
         ELSE '6001+' 
       END AS pensja, 
       COUNT(*) AS n
        FROM pracownicy
GROUP BY CASE 
         WHEN pensja <= 1000 THEN '1-1000'
         WHEN pensja <= 3000 THEN '1001-3000'
         WHEN pensja <= 6000 THEN '3001-6000'
         ELSE '6001+' 
         END;
END pracownicy_zarobki;

PROCEDURE top_5_klientow(c1 OUT SYS_REFCURSOR)
    IS
    BEGIN
        OPEN c1 FOR
            SELECT DISTINCT 
            NAZWISKO, SUM(cena) cena, imie 
            from bilety 
            INNER JOIN PASAZEROWIE ON BILETY.ID_PASAZER=PASAZEROWIE.ID_PASAZER group by NAZWISKO, imie 
            ORDER BY CENA DESC FETCH FIRST 5 ROWS ONLY;
END top_5_klientow;


PROCEDURE ostatnie_zarobki(ostatni_tydzien OUT NUMBER, ostatni_miesiac OUT NUMBER, ostatni_kwartal OUT NUMBER)
    IS
    zysk NUMBER(10, 2);
    data_o DATE;

    teraz DATE;

    cursor zarobki is 
        SELECT przewidywany_zysk, data_odlotu from loty;
    BEGIN
        ostatni_tydzien := 0;
        ostatni_miesiac := 0;
        ostatni_kwartal := 0;

        select CURRENT_DATE into teraz from dual;
        OPEN zarobki;
        LOOP
            FETCH zarobki into zysk, data_o;
            IF teraz-data_o <= 7 THEN
                ostatni_tydzien := ostatni_tydzien + zysk;
            END IF;
            IF teraz-data_o <= 30 THEN
                ostatni_miesiac := ostatni_miesiac + zysk;
            END IF;   
            IF teraz-data_o <= 90 THEN
                ostatni_kwartal := ostatni_kwartal + zysk;
            END IF;   
            EXIT WHEN zarobki%notfound; 
        END LOOP;
        CLOSE zarobki;     

END ostatnie_zarobki;

END STATYSTYKA_OPISOWA;


/
--------------------------------------------------------
--  DDL for Package Body USER_PROFILE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "SZYMON"."USER_PROFILE" AS

  PROCEDURE USER_FIND(
        c1 OUT sys_refcursor,
        in_username IN uzytkownicy.username%TYPE) AS
  BEGIN
  OPEN c1 FOR 
    SELECT IMIE, NAZWISKO, NR_TELEFONU, E_MAIL 
    FROM PASAZEROWIE
    WHERE id_uzytkownik = (SELECT UZYTKOWNICY.id_uzytkownik FROM uzytkownicy where uzytkownicy.username = in_username);
  END USER_FIND;
  
  PROCEDURE USER_EDIT(
        in_username IN uzytkownicy.username%TYPE,
        in_name IN pasazerowie.imie%TYPE,
        in_surname IN pasazerowie.nazwisko%TYPE,
        in_e_mail IN pasazerowie.e_mail%TYPE,
        in_number IN pasazerowie.nr_telefonu%TYPE)      
        IS
        any_rows_found number;
        user_id number;
        q_name pasazerowie.imie%TYPE := in_name;
        q_surname pasazerowie.nazwisko%TYPE := in_surname;
        q_e_mail pasazerowie.e_mail%TYPE := in_e_mail;
        q_number pasazerowie.nr_telefonu%TYPE := in_number;
        BEGIN
        SELECT count(*), id_uzytkownik
        INTO any_rows_found, user_id
        FROM pasazerowie
        WHERE id_uzytkownik = (SELECT UZYTKOWNICY.id_uzytkownik FROM uzytkownicy where uzytkownicy.username = in_username)
        GROUP BY id_uzytkownik;
        IF any_rows_found != 0 THEN
            IF q_name IS NOT NULL THEN
                UPDATE PASAZEROWIE SET imie=q_name WHERE pasazerowie.id_uzytkownik = user_id;
            END IF;
            IF q_surname IS NOT NULL THEN
                UPDATE PASAZEROWIE SET nazwisko=q_surname WHERE pasazerowie.id_uzytkownik = user_id;
            END IF;
            IF q_e_mail IS NOT NULL THEN
                UPDATE PASAZEROWIE SET e_mail=q_e_mail WHERE pasazerowie.id_uzytkownik = user_id;
            END IF;
            IF q_number IS NOT NULL THEN
                UPDATE PASAZEROWIE SET nr_telefonu=q_number WHERE pasazerowie.id_uzytkownik = user_id;
            END IF;
        END IF;
        EXCEPTION
            WHEN no_data_found THEN
            SELECT id_uzytkownik
            INTO user_id
            FROM uzytkownicy
            WHERE uzytkownicy.username = in_username;
                IF in_name IS NULL THEN
                        q_name := ' ';
                END IF;
                IF in_surname IS NULL THEN
                    q_surname := ' ';
                END IF;
                IF in_e_mail IS NULL THEN
                    q_e_mail := ' ';
                END IF;
                IF in_number IS NULL THEN
                    q_number := ' ';
                END IF;
                INSERT INTO PASAZEROWIE VALUES(PASAZEROWIE_SEQ.nextval, user_id, q_name, q_surname, q_e_mail, q_number);
    END USER_EDIT;
    
    PROCEDURE USER_DEL(
        in_username IN uzytkownicy.username%TYPE)
        IS
        BEGIN
            DELETE FROM UZYTKOWNICY WHERE username = in_username;
        END USER_DEL;
        
    PROCEDURE USER_BOOKINGS(
        c1 OUT SYS_REFCURSOR,
        in_username IN  uzytkownicy.username%TYPE)
        AS
        BEGIN
        OPEN c1 FOR
            SELECT ID_BILET, data_odlotu ,miejsce_odlotu, miejsce_przylotu, bagaz, CENA, CZY_OPLACONY
            FROM (SELECT ID_BILET, do_eleganckiej_daty(data_odlotu) data_odlotu, BILETY.ID_PASAZER, BAGAZE.ID_TYP_BAGAZU , (l_odl.MIASTO || '/' || l_odl.KRAJ) miejsce_odlotu, (l_p.MIASTO || '/' || l_p.KRAJ) miejsce_przylotu, (OPLATA||' '||TYP) bagaz, CENA, CZY_OPLACONY
            FROM ((((((BILETY INNER JOIN PASAZEROWIE ON BILETY.ID_PASAZER = PASAZEROWIE.ID_PASAZER) 
                INNER JOIN loty ON BILETY.ID_LOT = LOTY.ID_LOT) 
                INNER JOIN LOTNISKA l_odl ON loty.id_miejsca_odlotu=l_odl.id_lotnisko)
                INNER JOIN LOTNISKA l_p ON loty.id_miejsca_przylotu=l_p.id_lotnisko)
                INNER JOIN BAGAZE ON BILETY.ID_BAGAZ = BAGAZE.ID_BAGAZ)
                INNER JOIN TYPY_BAGAZY ON BAGAZE.ID_TYP_BAGAZU = TYPY_BAGAZY.ID_TYP_BAGAZ)
            ORDER BY ID_BILET)
            WHERE ID_PASAZER = (SELECT ID_PASAZER FROM PASAZEROWIE WHERE ID_UZYTKOWNIK = (SELECT ID_UZYTKOWNIK FROM UZYTKOWNICY WHERE USERNAME = in_username));
        END USER_BOOKINGS;
        
    PROCEDURE USER_UPCOMING(
        c1 OUT SYS_REFCURSOR,
        in_username IN  uzytkownicy.username%TYPE)
        AS
        BEGIN
        OPEN c1 FOR
            SELECT ID_BILET, do_eleganckiej_daty(data_odlotu) data_odlotu ,miejsce_odlotu, miejsce_przylotu, bagaz, CENA, CZY_OPLACONY
            FROM (SELECT ID_BILET, data_odlotu, BILETY.ID_PASAZER, BAGAZE.ID_TYP_BAGAZU , (l_odl.MIASTO || '/' || l_odl.KRAJ) miejsce_odlotu, (l_p.MIASTO || '/' || l_p.KRAJ) miejsce_przylotu, (OPLATA||' '||TYP) bagaz, CENA, CZY_OPLACONY
            FROM ((((((BILETY INNER JOIN PASAZEROWIE ON BILETY.ID_PASAZER = PASAZEROWIE.ID_PASAZER) 
                INNER JOIN loty ON BILETY.ID_LOT = LOTY.ID_LOT) 
                INNER JOIN LOTNISKA l_odl ON loty.id_miejsca_odlotu=l_odl.id_lotnisko)
                INNER JOIN LOTNISKA l_p ON loty.id_miejsca_przylotu=l_p.id_lotnisko)
                INNER JOIN BAGAZE ON BILETY.ID_BAGAZ = BAGAZE.ID_BAGAZ)
                INNER JOIN TYPY_BAGAZY ON BAGAZE.ID_TYP_BAGAZU = TYPY_BAGAZY.ID_TYP_BAGAZ)
            ORDER BY ID_BILET)
            WHERE ID_PASAZER = (SELECT ID_PASAZER FROM PASAZEROWIE WHERE ID_UZYTKOWNIK = (SELECT ID_UZYTKOWNIK FROM UZYTKOWNICY WHERE USERNAME = in_username)) AND
                  data_odlotu BETWEEN SYSDATE AND (SYSDATE + INTERVAL '14' DAY);
        END USER_UPCOMING;
        
END USER_PROFILE;

/
--------------------------------------------------------
--  DDL for Package Body USERUTILS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "SZYMON"."USERUTILS" AS 

    PROCEDURE ADD_USER(
        in_username IN UZYTKOWNICY.USERNAME%TYPE,
        in_pass IN UZYTKOWNICY.PASS%TYPE)
        IS
        BEGIN
            INSERT INTO uzytkownicy ("ID_UZYTKOWNIK", "USERNAME", "PASS", "TYP_KONTA")
            VALUES (UZYTKOWNICY_SEQ.nextval, in_username, in_pass, 0);
            COMMIT;
    END ADD_USER;

    PROCEDURE FIND_USER(
        c1 OUT SYS_REFCURSOR,
        in_username IN UZYTKOWNICY.USERNAME%TYPE)
        AS 
        BEGIN
        OPEN c1 FOR
            SELECT ID_UZYTKOWNIK, USERNAME, TYP_KONTA, PASS
            FROM UZYTKOWNICY
            WHERE USERNAME=in_username;
    END FIND_USER;

    PROCEDURE CHECK_IF_EXISTS(
        c1 OUT SYS_REFCURSOR,
        in_username IN UZYTKOWNICY.USERNAME%TYPE)
        AS 
        BEGIN
        OPEN c1 FOR
            SELECT USERNAME 
            FROM UZYTKOWNICY
            WHERE USERNAME=in_username;
    END CHECK_IF_EXISTS;

END USERUTILS;

/
--------------------------------------------------------
--  DDL for Package Body UZYTKOWNICY_DIU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "SZYMON"."UZYTKOWNICY_DIU" AS 

    PROCEDURE UZYTKOWNIK_DELETE(
        in_id_uzytkownik IN UZYTKOWNICY.ID_UZYTKOWNIK%TYPE)
        IS
        BEGIN
            DELETE FROM UZYTKOWNICY WHERE id_uzytkownik=in_id_uzytkownik;
            COMMIT;
    END UZYTKOWNIK_DELETE;

    PROCEDURE UZYTKOWNIK_INSERT(
        in_username IN UZYTKOWNICY.USERNAME%TYPE,
        in_pass IN UZYTKOWNICY.PASS%TYPE,
        in_typ_konta IN UZYTKOWNICY.TYP_KONTA%TYPE
        )
        IS 
        BEGIN
            INSERT INTO uzytkownicy ("ID_UZYTKOWNIK", "USERNAME", "PASS", "TYP_KONTA")
            VALUES (UZYTKOWNICY_SEQ.nextval, in_username, in_pass, in_typ_konta);
            COMMIT;
    END UZYTKOWNIK_INSERT;

    PROCEDURE UZYTKOWNIK_UPDATE(
        in_id_uzytkownik IN UZYTKOWNICY.ID_UZYTKOWNIK%TYPE,
        in_username IN UZYTKOWNICY.USERNAME%TYPE,
        in_pass IN UZYTKOWNICY.PASS%TYPE,
        in_typ_konta IN UZYTKOWNICY.TYP_KONTA%TYPE)
        IS 
        BEGIN
        IF in_username IS NOT NULL THEN
            UPDATE uzytkownicy SET username=in_username WHERE id_uzytkownik=in_id_uzytkownik;
        END IF;
        IF in_pass IS NOT NULL THEN
            UPDATE uzytkownicy SET pass=in_pass WHERE id_uzytkownik=in_id_uzytkownik;
        END IF;
        IF in_typ_konta IS NOT NULL THEN
            UPDATE uzytkownicy SET typ_konta=in_typ_konta WHERE id_uzytkownik=in_id_uzytkownik;
        END IF;
        COMMIT;

    END UZYTKOWNIK_UPDATE;

    PROCEDURE GET_NUMBER_OF_ROWS(wyjscie OUT NUMBER)
        AS 
        BEGIN
        SELECT
        COUNT(*) INTO wyjscie
        FROM uzytkownicy;
    END GET_NUMBER_OF_ROWS;

    PROCEDURE GET_FROM_TABLE(
        c1 OUT SYS_REFCURSOR,
        in_start IN NUMBER,
        in_stop IN NUMBER,
        in_search IN VARCHAR)
        AS 
        BEGIN
        OPEN c1 FOR
            SELECT
                rn, id_uzytkownik, username, pass, typ_konta
            FROM
                (SELECT rownum rn, id_uzytkownik, username, pass, typ_konta from uzytkownicy WHERE username LIKE '%' || in_search || '%'  ORDER BY id_uzytkownik)
            WHERE 
                rn BETWEEN in_start AND in_stop;
    END GET_FROM_TABLE;

END UZYTKOWNICY_DIU;

/
--------------------------------------------------------
--  DDL for Function DO_ELEGANCKIEJ_DATY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "SZYMON"."DO_ELEGANCKIEJ_DATY" (
    in_date IN DATE) 
RETURN STRING
IS 
   out_date STRING(20); 
BEGIN 
    out_date := to_char(in_date, 'DD-MM-YY HH24:MI');
RETURN out_date; 
END;  

/
--------------------------------------------------------
--  DDL for Function XD
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "SZYMON"."XD" (
    in_odlot_kraj IN lotniska.kraj%TYPE,
    in_odlot_miasto IN lotniska.miasto%TYPE,
    in_przylot_kraj IN lotniska.kraj%TYPE,
    in_przylot_miasto IN lotniska.miasto%TYPE) 
RETURN number  
IS 
   choice number; 
BEGIN 
   IF ((in_odlot_kraj is not null or in_odlot_miasto is not null) and (in_przylot_kraj is not null or in_przylot_miasto is not null)) THEN 
      choice := 1; 
   ELSIF ((in_odlot_kraj is not null or in_odlot_miasto is not null) and (in_przylot_kraj is null or in_przylot_miasto is null)) THEN
      choice := 2;
   ELSIF ((in_odlot_kraj is null or in_odlot_miasto is null) and (in_przylot_kraj is not null or in_przylot_miasto is not null)) THEN
      choice := 3;
   ELSE 
   choice := 4;
   END IF; 
RETURN choice; 
END;  

/
--------------------------------------------------------
--  Constraints for Table BAGAZE
--------------------------------------------------------

  ALTER TABLE "SZYMON"."BAGAZE" MODIFY ("ID_BAGAZ" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."BAGAZE" MODIFY ("WAGA_BAGAZU_PODRECZNEGO" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."BAGAZE" MODIFY ("WAGA_BAGAZU_REJESTROWANEGO" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."BAGAZE" ADD CONSTRAINT "BAGAZE_PK" PRIMARY KEY ("ID_BAGAZ")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table BILETY
--------------------------------------------------------

  ALTER TABLE "SZYMON"."BILETY" MODIFY ("ID_PASAZER" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."BILETY" MODIFY ("ID_LOT" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."BILETY" MODIFY ("ID_BAGAZ" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."BILETY" MODIFY ("CENA" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."BILETY" MODIFY ("CZY_OPLACONY" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."BILETY" MODIFY ("ID_BILET" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."BILETY" ADD CONSTRAINT "BILETY_PK" PRIMARY KEY ("ID_BILET")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LOTNISKA
--------------------------------------------------------

  ALTER TABLE "SZYMON"."LOTNISKA" MODIFY ("ID_LOTNISKO" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."LOTNISKA" MODIFY ("KOD_LOTNISKO" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."LOTNISKA" MODIFY ("MIASTO" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."LOTNISKA" MODIFY ("KRAJ" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."LOTNISKA" ADD CONSTRAINT "LOTNISKO_PK" PRIMARY KEY ("ID_LOTNISKO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LOTY
--------------------------------------------------------

  ALTER TABLE "SZYMON"."LOTY" MODIFY ("ID_LOT" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."LOTY" ADD CONSTRAINT "LOTY_PK" PRIMARY KEY ("ID_LOT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "SZYMON"."LOTY" MODIFY ("ID_MIEJSCA_ODLOTU" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."LOTY" MODIFY ("ID_MIEJSCA_PRZYLOTU" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."LOTY" MODIFY ("ID_SAMOLOT" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."LOTY" MODIFY ("DATA_ODLOTU" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."LOTY" MODIFY ("DATA_PRZYLOTU" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LOTY_PRACOWNICY
--------------------------------------------------------

  ALTER TABLE "SZYMON"."LOTY_PRACOWNICY" MODIFY ("ID_LOT" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."LOTY_PRACOWNICY" MODIFY ("ID_PRACOWNICY" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PASAZEROWIE
--------------------------------------------------------

  ALTER TABLE "SZYMON"."PASAZEROWIE" MODIFY ("ID_PASAZER" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."PASAZEROWIE" MODIFY ("ID_UZYTKOWNIK" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."PASAZEROWIE" MODIFY ("IMIE" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."PASAZEROWIE" MODIFY ("NAZWISKO" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."PASAZEROWIE" MODIFY ("NR_TELEFONU" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."PASAZEROWIE" MODIFY ("E_MAIL" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."PASAZEROWIE" ADD CONSTRAINT "PASAZEROWIE_PK" PRIMARY KEY ("ID_PASAZER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "SZYMON"."PASAZEROWIE" ADD CONSTRAINT "PASAZEROWIE_UK1" UNIQUE ("ID_UZYTKOWNIK")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRACOWNICY
--------------------------------------------------------

  ALTER TABLE "SZYMON"."PRACOWNICY" MODIFY ("ID_PRACOWNIK" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."PRACOWNICY" MODIFY ("IMIE" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."PRACOWNICY" MODIFY ("NAZWISKO" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."PRACOWNICY" MODIFY ("STANOWISKO" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."PRACOWNICY" MODIFY ("PENSJA" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."PRACOWNICY" ADD CONSTRAINT "PRACOWNICY_PK" PRIMARY KEY ("ID_PRACOWNIK")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table SAMOLOTY
--------------------------------------------------------

  ALTER TABLE "SZYMON"."SAMOLOTY" MODIFY ("ID_SAMOLOT" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."SAMOLOTY" MODIFY ("ID_TYP" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."SAMOLOTY" MODIFY ("MARKA" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."SAMOLOTY" MODIFY ("S_MODEL" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."SAMOLOTY" MODIFY ("LICZBA_MIEJSC" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."SAMOLOTY" ADD CONSTRAINT "SAMOLOTY_PK" PRIMARY KEY ("ID_SAMOLOT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TYPY_BAGAZY
--------------------------------------------------------

  ALTER TABLE "SZYMON"."TYPY_BAGAZY" MODIFY ("ID_TYP_BAGAZ" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."TYPY_BAGAZY" MODIFY ("WAGA" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."TYPY_BAGAZY" MODIFY ("OPLATA" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."TYPY_BAGAZY" ADD CONSTRAINT "TYPY_BAGAZY_PK" PRIMARY KEY ("ID_TYP_BAGAZ")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TYPY_SAMOLOTOW
--------------------------------------------------------

  ALTER TABLE "SZYMON"."TYPY_SAMOLOTOW" MODIFY ("ID_TYP" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."TYPY_SAMOLOTOW" MODIFY ("TYP" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."TYPY_SAMOLOTOW" ADD CONSTRAINT "TYPY_SAMOLOTOW_PK" PRIMARY KEY ("ID_TYP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table UZYTKOWNICY
--------------------------------------------------------

  ALTER TABLE "SZYMON"."UZYTKOWNICY" MODIFY ("ID_UZYTKOWNIK" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."UZYTKOWNICY" MODIFY ("USERNAME" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."UZYTKOWNICY" MODIFY ("PASS" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."UZYTKOWNICY" MODIFY ("TYP_KONTA" NOT NULL ENABLE);
  ALTER TABLE "SZYMON"."UZYTKOWNICY" ADD CONSTRAINT "UZYTKOWNICY_PK" PRIMARY KEY ("ID_UZYTKOWNIK")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BAGAZE
--------------------------------------------------------

  ALTER TABLE "SZYMON"."BAGAZE" ADD CONSTRAINT "BAGAZE_FK1" FOREIGN KEY ("ID_TYP_BAGAZU")
	  REFERENCES "SZYMON"."TYPY_BAGAZY" ("ID_TYP_BAGAZ") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BILETY
--------------------------------------------------------

  ALTER TABLE "SZYMON"."BILETY" ADD CONSTRAINT "BILETY_FK1" FOREIGN KEY ("ID_PASAZER")
	  REFERENCES "SZYMON"."PASAZEROWIE" ("ID_PASAZER") ON DELETE CASCADE ENABLE;
  ALTER TABLE "SZYMON"."BILETY" ADD CONSTRAINT "BILETY_FK2" FOREIGN KEY ("ID_LOT")
	  REFERENCES "SZYMON"."LOTY" ("ID_LOT") ENABLE;
  ALTER TABLE "SZYMON"."BILETY" ADD CONSTRAINT "BILETY_FK3" FOREIGN KEY ("ID_BAGAZ")
	  REFERENCES "SZYMON"."BAGAZE" ("ID_BAGAZ") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LOTY
--------------------------------------------------------

  ALTER TABLE "SZYMON"."LOTY" ADD CONSTRAINT "LOTY_FK1" FOREIGN KEY ("ID_MIEJSCA_ODLOTU")
	  REFERENCES "SZYMON"."LOTNISKA" ("ID_LOTNISKO") ENABLE;
  ALTER TABLE "SZYMON"."LOTY" ADD CONSTRAINT "LOTY_FK2" FOREIGN KEY ("ID_MIEJSCA_PRZYLOTU")
	  REFERENCES "SZYMON"."LOTNISKA" ("ID_LOTNISKO") ENABLE;
  ALTER TABLE "SZYMON"."LOTY" ADD CONSTRAINT "LOTY_FK3" FOREIGN KEY ("ID_SAMOLOT")
	  REFERENCES "SZYMON"."SAMOLOTY" ("ID_SAMOLOT") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LOTY_PRACOWNICY
--------------------------------------------------------

  ALTER TABLE "SZYMON"."LOTY_PRACOWNICY" ADD CONSTRAINT "LOTY_PRACOWNICY_FK1" FOREIGN KEY ("ID_LOT")
	  REFERENCES "SZYMON"."LOTY" ("ID_LOT") ENABLE;
  ALTER TABLE "SZYMON"."LOTY_PRACOWNICY" ADD CONSTRAINT "LOTY_PRACOWNICY_FK2" FOREIGN KEY ("ID_PRACOWNICY")
	  REFERENCES "SZYMON"."PRACOWNICY" ("ID_PRACOWNIK") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PASAZEROWIE
--------------------------------------------------------

  ALTER TABLE "SZYMON"."PASAZEROWIE" ADD CONSTRAINT "PASAZEROWIE_FK1" FOREIGN KEY ("ID_UZYTKOWNIK")
	  REFERENCES "SZYMON"."UZYTKOWNICY" ("ID_UZYTKOWNIK") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SAMOLOTY
--------------------------------------------------------

  ALTER TABLE "SZYMON"."SAMOLOTY" ADD CONSTRAINT "SAMOLOTY_FK1" FOREIGN KEY ("ID_TYP")
	  REFERENCES "SZYMON"."TYPY_SAMOLOTOW" ("ID_TYP") ENABLE;
